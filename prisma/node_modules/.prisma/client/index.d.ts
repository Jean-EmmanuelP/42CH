
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Account"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }, ExtArgs["result"]["account"]>
  composites: {}
}

/**
 * Model Account
 * 
 */
export type Account = runtime.Types.DefaultSelection<AccountPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    sessionToken: string
    userId: string
    expires: Date
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    challenges: ChallengePayload<ExtArgs>[]
    participations: ChallengePayload<ExtArgs>[]
    wonChallenges: ChallengePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    friends: string[]
    friendsRequests: string[]
    access_token: string | null
    balance: number
    status: string
    statusMessage: string | null
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type ChallengeHistoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ChallengeHistory"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
  }, ExtArgs["result"]["challengeHistory"]>
  composites: {}
}

/**
 * Model ChallengeHistory
 * 
 */
export type ChallengeHistory = runtime.Types.DefaultSelection<ChallengeHistoryPayload>
export type UsersBetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "UsersBet"
  objects: {
    Challenge: ChallengePayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    winnerId: string
    userId: string
    amount: number
    challengeId: string | null
  }, ExtArgs["result"]["usersBet"]>
  composites: {}
}

/**
 * Model UsersBet
 * 
 */
export type UsersBet = runtime.Types.DefaultSelection<UsersBetPayload>
export type ChallengePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Challenge"
  objects: {
    userBets: UsersBetPayload<ExtArgs>[]
    winner: UserPayload<ExtArgs> | null
    participant: UserPayload<ExtArgs> | null
    creator: UserPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    completedAt: Date | null
    winnerId: string | null
    loserId: string | null
    creatorAnswer: boolean
    opponentAnswer: boolean
    creatorWinner: string
    opponentWinner: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic: boolean
    timerPublic: number
    contractTerms: string | null
    gameSelected: string
    description: string | null
    participantId: string | null
    amount: number | null
  }, ExtArgs["result"]["challenge"]>
  composites: {}
}

/**
 * Model Challenge
 * 
 */
export type Challenge = runtime.Types.DefaultSelection<ChallengePayload>
export type DefiPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Defi"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    creatorId: string
    opponentId: string
    creatorHonor: boolean
    opponentHonor: boolean
    creatorBid: number
    opponentBid: number
    contractTerms: string
    gameSelected: string
    creatorAccepted: boolean
    opponentAccepted: boolean
    isPublic: boolean
    timerPublic: number
  }, ExtArgs["result"]["defi"]>
  composites: {}
}

/**
 * Model Defi
 * 
 */
export type Defi = runtime.Types.DefaultSelection<DefiPayload>
export type DefiRequestPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "DefiRequest"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    senderUsername: string
    receiverUsername: string
  }, ExtArgs["result"]["defiRequest"]>
  composites: {}
}

/**
 * Model DefiRequest
 * 
 */
export type DefiRequest = runtime.Types.DefaultSelection<DefiRequestPayload>
export type VerificationTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VerificationToken"
  objects: {}
  scalars: $Extensions.GetResult<{
    identifier: string
    token: string
    expires: Date
  }, ExtArgs["result"]["verificationToken"]>
  composites: {}
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = runtime.Types.DefaultSelection<VerificationTokenPayload>
export type EventPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Event"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    description: string
    label: string
    day: string
    limitedSeats: number | null
    participantsUsernames: string[]
    isFull: boolean
  }, ExtArgs["result"]["event"]>
  composites: {}
}

/**
 * Model Event
 * 
 */
export type Event = runtime.Types.DefaultSelection<EventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.challengeHistory`: Exposes CRUD operations for the **ChallengeHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChallengeHistories
    * const challengeHistories = await prisma.challengeHistory.findMany()
    * ```
    */
  get challengeHistory(): Prisma.ChallengeHistoryDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.usersBet`: Exposes CRUD operations for the **UsersBet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersBets
    * const usersBets = await prisma.usersBet.findMany()
    * ```
    */
  get usersBet(): Prisma.UsersBetDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.challenge`: Exposes CRUD operations for the **Challenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Challenges
    * const challenges = await prisma.challenge.findMany()
    * ```
    */
  get challenge(): Prisma.ChallengeDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.defi`: Exposes CRUD operations for the **Defi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Defis
    * const defis = await prisma.defi.findMany()
    * ```
    */
  get defi(): Prisma.DefiDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.defiRequest`: Exposes CRUD operations for the **DefiRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DefiRequests
    * const defiRequests = await prisma.defiRequest.findMany()
    * ```
    */
  get defiRequest(): Prisma.DefiRequestDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    ChallengeHistory: 'ChallengeHistory',
    UsersBet: 'UsersBet',
    Challenge: 'Challenge',
    Defi: 'Defi',
    DefiRequest: 'DefiRequest',
    VerificationToken: 'VerificationToken',
    Event: 'Event'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'session' | 'user' | 'challengeHistory' | 'usersBet' | 'challenge' | 'defi' | 'defiRequest' | 'verificationToken' | 'event'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: AccountPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ChallengeHistory: {
        payload: ChallengeHistoryPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChallengeHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChallengeHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          findFirst: {
            args: Prisma.ChallengeHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChallengeHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          findMany: {
            args: Prisma.ChallengeHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>[]
          }
          create: {
            args: Prisma.ChallengeHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          createMany: {
            args: Prisma.ChallengeHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChallengeHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          update: {
            args: Prisma.ChallengeHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ChallengeHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChallengeHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChallengeHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengeHistoryPayload>
          }
          aggregate: {
            args: Prisma.ChallengeHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChallengeHistory>
          }
          groupBy: {
            args: Prisma.ChallengeHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChallengeHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChallengeHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<ChallengeHistoryCountAggregateOutputType> | number
          }
        }
      }
      UsersBet: {
        payload: UsersBetPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UsersBetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersBetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          findFirst: {
            args: Prisma.UsersBetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersBetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          findMany: {
            args: Prisma.UsersBetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>[]
          }
          create: {
            args: Prisma.UsersBetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          createMany: {
            args: Prisma.UsersBetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersBetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          update: {
            args: Prisma.UsersBetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          deleteMany: {
            args: Prisma.UsersBetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersBetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersBetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersBetPayload>
          }
          aggregate: {
            args: Prisma.UsersBetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsersBet>
          }
          groupBy: {
            args: Prisma.UsersBetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersBetGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersBetCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersBetCountAggregateOutputType> | number
          }
        }
      }
      Challenge: {
        payload: ChallengePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChallengeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChallengeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          findFirst: {
            args: Prisma.ChallengeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChallengeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          findMany: {
            args: Prisma.ChallengeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>[]
          }
          create: {
            args: Prisma.ChallengeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          createMany: {
            args: Prisma.ChallengeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChallengeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          update: {
            args: Prisma.ChallengeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          deleteMany: {
            args: Prisma.ChallengeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChallengeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChallengeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChallengePayload>
          }
          aggregate: {
            args: Prisma.ChallengeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChallenge>
          }
          groupBy: {
            args: Prisma.ChallengeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChallengeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChallengeCountArgs<ExtArgs>,
            result: $Utils.Optional<ChallengeCountAggregateOutputType> | number
          }
        }
      }
      Defi: {
        payload: DefiPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DefiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DefiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          findFirst: {
            args: Prisma.DefiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DefiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          findMany: {
            args: Prisma.DefiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>[]
          }
          create: {
            args: Prisma.DefiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          createMany: {
            args: Prisma.DefiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DefiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          update: {
            args: Prisma.DefiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          deleteMany: {
            args: Prisma.DefiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DefiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DefiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiPayload>
          }
          aggregate: {
            args: Prisma.DefiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDefi>
          }
          groupBy: {
            args: Prisma.DefiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DefiGroupByOutputType>[]
          }
          count: {
            args: Prisma.DefiCountArgs<ExtArgs>,
            result: $Utils.Optional<DefiCountAggregateOutputType> | number
          }
        }
      }
      DefiRequest: {
        payload: DefiRequestPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DefiRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DefiRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          findFirst: {
            args: Prisma.DefiRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DefiRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          findMany: {
            args: Prisma.DefiRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>[]
          }
          create: {
            args: Prisma.DefiRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          createMany: {
            args: Prisma.DefiRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DefiRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          update: {
            args: Prisma.DefiRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          deleteMany: {
            args: Prisma.DefiRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DefiRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DefiRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DefiRequestPayload>
          }
          aggregate: {
            args: Prisma.DefiRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDefiRequest>
          }
          groupBy: {
            args: Prisma.DefiRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DefiRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DefiRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<DefiRequestCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: VerificationTokenPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: EventPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    challenges: number
    participations: number
    wonChallenges: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    challenges?: boolean | UserCountOutputTypeCountChallengesArgs
    participations?: boolean | UserCountOutputTypeCountParticipationsArgs
    wonChallenges?: boolean | UserCountOutputTypeCountWonChallengesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChallengesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWonChallengesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
  }



  /**
   * Count Type ChallengeCountOutputType
   */


  export type ChallengeCountOutputType = {
    userBets: number
  }

  export type ChallengeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userBets?: boolean | ChallengeCountOutputTypeCountUserBetsArgs
  }

  // Custom InputTypes

  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeCountOutputType
     */
    select?: ChallengeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChallengeCountOutputType without action
   */
  export type ChallengeCountOutputTypeCountUserBetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersBetWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> = $Types.GetResult<AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    access_token: string | null
    balance: number | null
    status: string | null
    statusMessage: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    access_token: string | null
    balance: number | null
    status: string | null
    statusMessage: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    friends: number
    friendsRequests: number
    access_token: number
    balance: number
    status: number
    statusMessage: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    access_token?: true
    balance?: true
    status?: true
    statusMessage?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    access_token?: true
    balance?: true
    status?: true
    statusMessage?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    friends?: true
    friendsRequests?: true
    access_token?: true
    balance?: true
    status?: true
    statusMessage?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    friends: string[]
    friendsRequests: string[]
    access_token: string | null
    balance: number
    status: string
    statusMessage: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    friends?: boolean
    friendsRequests?: boolean
    access_token?: boolean
    balance?: boolean
    status?: boolean
    statusMessage?: boolean
    challenges?: boolean | User$challengesArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    wonChallenges?: boolean | User$wonChallengesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    friends?: boolean
    friendsRequests?: boolean
    access_token?: boolean
    balance?: boolean
    status?: boolean
    statusMessage?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    challenges?: boolean | User$challengesArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    wonChallenges?: boolean | User$wonChallengesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    challenges<T extends User$challengesArgs<ExtArgs> = {}>(args?: Subset<T, User$challengesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findMany', never>| Null>;

    participations<T extends User$participationsArgs<ExtArgs> = {}>(args?: Subset<T, User$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findMany', never>| Null>;

    wonChallenges<T extends User$wonChallengesArgs<ExtArgs> = {}>(args?: Subset<T, User$wonChallengesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.challenges
   */
  export type User$challengesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    cursor?: ChallengeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * User.participations
   */
  export type User$participationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    cursor?: ChallengeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * User.wonChallenges
   */
  export type User$wonChallengesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    cursor?: ChallengeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model ChallengeHistory
   */


  export type AggregateChallengeHistory = {
    _count: ChallengeHistoryCountAggregateOutputType | null
    _min: ChallengeHistoryMinAggregateOutputType | null
    _max: ChallengeHistoryMaxAggregateOutputType | null
  }

  export type ChallengeHistoryMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type ChallengeHistoryMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type ChallengeHistoryCountAggregateOutputType = {
    id: number
    createdAt: number
    _all: number
  }


  export type ChallengeHistoryMinAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type ChallengeHistoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type ChallengeHistoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    _all?: true
  }

  export type ChallengeHistoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChallengeHistory to aggregate.
     */
    where?: ChallengeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeHistories to fetch.
     */
    orderBy?: Enumerable<ChallengeHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChallengeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChallengeHistories
    **/
    _count?: true | ChallengeHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeHistoryMaxAggregateInputType
  }

  export type GetChallengeHistoryAggregateType<T extends ChallengeHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateChallengeHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallengeHistory[P]>
      : GetScalarType<T[P], AggregateChallengeHistory[P]>
  }




  export type ChallengeHistoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChallengeHistoryWhereInput
    orderBy?: Enumerable<ChallengeHistoryOrderByWithAggregationInput>
    by: ChallengeHistoryScalarFieldEnum[]
    having?: ChallengeHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeHistoryCountAggregateInputType | true
    _min?: ChallengeHistoryMinAggregateInputType
    _max?: ChallengeHistoryMaxAggregateInputType
  }


  export type ChallengeHistoryGroupByOutputType = {
    id: string
    createdAt: Date
    _count: ChallengeHistoryCountAggregateOutputType | null
    _min: ChallengeHistoryMinAggregateOutputType | null
    _max: ChallengeHistoryMaxAggregateOutputType | null
  }

  type GetChallengeHistoryGroupByPayload<T extends ChallengeHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChallengeHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeHistorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["challengeHistory"]>

  export type ChallengeHistorySelectScalar = {
    id?: boolean
    createdAt?: boolean
  }


  type ChallengeHistoryGetPayload<S extends boolean | null | undefined | ChallengeHistoryArgs> = $Types.GetResult<ChallengeHistoryPayload, S>

  type ChallengeHistoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChallengeHistoryFindManyArgs, 'select' | 'include'> & {
      select?: ChallengeHistoryCountAggregateInputType | true
    }

  export interface ChallengeHistoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChallengeHistory'], meta: { name: 'ChallengeHistory' } }
    /**
     * Find zero or one ChallengeHistory that matches the filter.
     * @param {ChallengeHistoryFindUniqueArgs} args - Arguments to find a ChallengeHistory
     * @example
     * // Get one ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChallengeHistoryFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChallengeHistoryFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChallengeHistory'> extends True ? Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ChallengeHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChallengeHistoryFindUniqueOrThrowArgs} args - Arguments to find a ChallengeHistory
     * @example
     * // Get one ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChallengeHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ChallengeHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryFindFirstArgs} args - Arguments to find a ChallengeHistory
     * @example
     * // Get one ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChallengeHistoryFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChallengeHistoryFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChallengeHistory'> extends True ? Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ChallengeHistory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryFindFirstOrThrowArgs} args - Arguments to find a ChallengeHistory
     * @example
     * // Get one ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChallengeHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ChallengeHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChallengeHistories
     * const challengeHistories = await prisma.challengeHistory.findMany()
     * 
     * // Get first 10 ChallengeHistories
     * const challengeHistories = await prisma.challengeHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeHistoryWithIdOnly = await prisma.challengeHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChallengeHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ChallengeHistory.
     * @param {ChallengeHistoryCreateArgs} args - Arguments to create a ChallengeHistory.
     * @example
     * // Create one ChallengeHistory
     * const ChallengeHistory = await prisma.challengeHistory.create({
     *   data: {
     *     // ... data to create a ChallengeHistory
     *   }
     * })
     * 
    **/
    create<T extends ChallengeHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeHistoryCreateArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ChallengeHistories.
     *     @param {ChallengeHistoryCreateManyArgs} args - Arguments to create many ChallengeHistories.
     *     @example
     *     // Create many ChallengeHistories
     *     const challengeHistory = await prisma.challengeHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChallengeHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChallengeHistory.
     * @param {ChallengeHistoryDeleteArgs} args - Arguments to delete one ChallengeHistory.
     * @example
     * // Delete one ChallengeHistory
     * const ChallengeHistory = await prisma.challengeHistory.delete({
     *   where: {
     *     // ... filter to delete one ChallengeHistory
     *   }
     * })
     * 
    **/
    delete<T extends ChallengeHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeHistoryDeleteArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ChallengeHistory.
     * @param {ChallengeHistoryUpdateArgs} args - Arguments to update one ChallengeHistory.
     * @example
     * // Update one ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChallengeHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeHistoryUpdateArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ChallengeHistories.
     * @param {ChallengeHistoryDeleteManyArgs} args - Arguments to filter ChallengeHistories to delete.
     * @example
     * // Delete a few ChallengeHistories
     * const { count } = await prisma.challengeHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChallengeHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChallengeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChallengeHistories
     * const challengeHistory = await prisma.challengeHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChallengeHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChallengeHistory.
     * @param {ChallengeHistoryUpsertArgs} args - Arguments to update or create a ChallengeHistory.
     * @example
     * // Update or create a ChallengeHistory
     * const challengeHistory = await prisma.challengeHistory.upsert({
     *   create: {
     *     // ... data to create a ChallengeHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChallengeHistory we want to update
     *   }
     * })
    **/
    upsert<T extends ChallengeHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeHistoryUpsertArgs<ExtArgs>>
    ): Prisma__ChallengeHistoryClient<$Types.GetResult<ChallengeHistoryPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ChallengeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryCountArgs} args - Arguments to filter ChallengeHistories to count.
     * @example
     * // Count the number of ChallengeHistories
     * const count = await prisma.challengeHistory.count({
     *   where: {
     *     // ... the filter for the ChallengeHistories we want to count
     *   }
     * })
    **/
    count<T extends ChallengeHistoryCountArgs>(
      args?: Subset<T, ChallengeHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChallengeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeHistoryAggregateArgs>(args: Subset<T, ChallengeHistoryAggregateArgs>): Prisma.PrismaPromise<GetChallengeHistoryAggregateType<T>>

    /**
     * Group by ChallengeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChallengeHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChallengeHistoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChallengeHistory base type for findUnique actions
   */
  export type ChallengeHistoryFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter, which ChallengeHistory to fetch.
     */
    where: ChallengeHistoryWhereUniqueInput
  }

  /**
   * ChallengeHistory findUnique
   */
  export interface ChallengeHistoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChallengeHistoryFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChallengeHistory findUniqueOrThrow
   */
  export type ChallengeHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter, which ChallengeHistory to fetch.
     */
    where: ChallengeHistoryWhereUniqueInput
  }


  /**
   * ChallengeHistory base type for findFirst actions
   */
  export type ChallengeHistoryFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter, which ChallengeHistory to fetch.
     */
    where?: ChallengeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeHistories to fetch.
     */
    orderBy?: Enumerable<ChallengeHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChallengeHistories.
     */
    cursor?: ChallengeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChallengeHistories.
     */
    distinct?: Enumerable<ChallengeHistoryScalarFieldEnum>
  }

  /**
   * ChallengeHistory findFirst
   */
  export interface ChallengeHistoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChallengeHistoryFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChallengeHistory findFirstOrThrow
   */
  export type ChallengeHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter, which ChallengeHistory to fetch.
     */
    where?: ChallengeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeHistories to fetch.
     */
    orderBy?: Enumerable<ChallengeHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChallengeHistories.
     */
    cursor?: ChallengeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChallengeHistories.
     */
    distinct?: Enumerable<ChallengeHistoryScalarFieldEnum>
  }


  /**
   * ChallengeHistory findMany
   */
  export type ChallengeHistoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter, which ChallengeHistories to fetch.
     */
    where?: ChallengeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChallengeHistories to fetch.
     */
    orderBy?: Enumerable<ChallengeHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChallengeHistories.
     */
    cursor?: ChallengeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChallengeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChallengeHistories.
     */
    skip?: number
    distinct?: Enumerable<ChallengeHistoryScalarFieldEnum>
  }


  /**
   * ChallengeHistory create
   */
  export type ChallengeHistoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * The data needed to create a ChallengeHistory.
     */
    data?: XOR<ChallengeHistoryCreateInput, ChallengeHistoryUncheckedCreateInput>
  }


  /**
   * ChallengeHistory createMany
   */
  export type ChallengeHistoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChallengeHistories.
     */
    data: Enumerable<ChallengeHistoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChallengeHistory update
   */
  export type ChallengeHistoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * The data needed to update a ChallengeHistory.
     */
    data: XOR<ChallengeHistoryUpdateInput, ChallengeHistoryUncheckedUpdateInput>
    /**
     * Choose, which ChallengeHistory to update.
     */
    where: ChallengeHistoryWhereUniqueInput
  }


  /**
   * ChallengeHistory updateMany
   */
  export type ChallengeHistoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChallengeHistories.
     */
    data: XOR<ChallengeHistoryUpdateManyMutationInput, ChallengeHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChallengeHistories to update
     */
    where?: ChallengeHistoryWhereInput
  }


  /**
   * ChallengeHistory upsert
   */
  export type ChallengeHistoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * The filter to search for the ChallengeHistory to update in case it exists.
     */
    where: ChallengeHistoryWhereUniqueInput
    /**
     * In case the ChallengeHistory found by the `where` argument doesn't exist, create a new ChallengeHistory with this data.
     */
    create: XOR<ChallengeHistoryCreateInput, ChallengeHistoryUncheckedCreateInput>
    /**
     * In case the ChallengeHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChallengeHistoryUpdateInput, ChallengeHistoryUncheckedUpdateInput>
  }


  /**
   * ChallengeHistory delete
   */
  export type ChallengeHistoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
    /**
     * Filter which ChallengeHistory to delete.
     */
    where: ChallengeHistoryWhereUniqueInput
  }


  /**
   * ChallengeHistory deleteMany
   */
  export type ChallengeHistoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChallengeHistories to delete
     */
    where?: ChallengeHistoryWhereInput
  }


  /**
   * ChallengeHistory without action
   */
  export type ChallengeHistoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChallengeHistory
     */
    select?: ChallengeHistorySelect<ExtArgs> | null
  }



  /**
   * Model UsersBet
   */


  export type AggregateUsersBet = {
    _count: UsersBetCountAggregateOutputType | null
    _avg: UsersBetAvgAggregateOutputType | null
    _sum: UsersBetSumAggregateOutputType | null
    _min: UsersBetMinAggregateOutputType | null
    _max: UsersBetMaxAggregateOutputType | null
  }

  export type UsersBetAvgAggregateOutputType = {
    amount: number | null
  }

  export type UsersBetSumAggregateOutputType = {
    amount: number | null
  }

  export type UsersBetMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    winnerId: string | null
    userId: string | null
    amount: number | null
    challengeId: string | null
  }

  export type UsersBetMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    winnerId: string | null
    userId: string | null
    amount: number | null
    challengeId: string | null
  }

  export type UsersBetCountAggregateOutputType = {
    id: number
    createdAt: number
    winnerId: number
    userId: number
    amount: number
    challengeId: number
    _all: number
  }


  export type UsersBetAvgAggregateInputType = {
    amount?: true
  }

  export type UsersBetSumAggregateInputType = {
    amount?: true
  }

  export type UsersBetMinAggregateInputType = {
    id?: true
    createdAt?: true
    winnerId?: true
    userId?: true
    amount?: true
    challengeId?: true
  }

  export type UsersBetMaxAggregateInputType = {
    id?: true
    createdAt?: true
    winnerId?: true
    userId?: true
    amount?: true
    challengeId?: true
  }

  export type UsersBetCountAggregateInputType = {
    id?: true
    createdAt?: true
    winnerId?: true
    userId?: true
    amount?: true
    challengeId?: true
    _all?: true
  }

  export type UsersBetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersBet to aggregate.
     */
    where?: UsersBetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersBets to fetch.
     */
    orderBy?: Enumerable<UsersBetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersBetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersBets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersBets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersBets
    **/
    _count?: true | UsersBetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersBetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersBetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersBetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersBetMaxAggregateInputType
  }

  export type GetUsersBetAggregateType<T extends UsersBetAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersBet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersBet[P]>
      : GetScalarType<T[P], AggregateUsersBet[P]>
  }




  export type UsersBetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersBetWhereInput
    orderBy?: Enumerable<UsersBetOrderByWithAggregationInput>
    by: UsersBetScalarFieldEnum[]
    having?: UsersBetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersBetCountAggregateInputType | true
    _avg?: UsersBetAvgAggregateInputType
    _sum?: UsersBetSumAggregateInputType
    _min?: UsersBetMinAggregateInputType
    _max?: UsersBetMaxAggregateInputType
  }


  export type UsersBetGroupByOutputType = {
    id: string
    createdAt: Date
    winnerId: string
    userId: string
    amount: number
    challengeId: string | null
    _count: UsersBetCountAggregateOutputType | null
    _avg: UsersBetAvgAggregateOutputType | null
    _sum: UsersBetSumAggregateOutputType | null
    _min: UsersBetMinAggregateOutputType | null
    _max: UsersBetMaxAggregateOutputType | null
  }

  type GetUsersBetGroupByPayload<T extends UsersBetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersBetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersBetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersBetGroupByOutputType[P]>
            : GetScalarType<T[P], UsersBetGroupByOutputType[P]>
        }
      >
    >


  export type UsersBetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    winnerId?: boolean
    userId?: boolean
    amount?: boolean
    challengeId?: boolean
    Challenge?: boolean | UsersBet$ChallengeArgs<ExtArgs>
  }, ExtArgs["result"]["usersBet"]>

  export type UsersBetSelectScalar = {
    id?: boolean
    createdAt?: boolean
    winnerId?: boolean
    userId?: boolean
    amount?: boolean
    challengeId?: boolean
  }

  export type UsersBetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Challenge?: boolean | UsersBet$ChallengeArgs<ExtArgs>
  }


  type UsersBetGetPayload<S extends boolean | null | undefined | UsersBetArgs> = $Types.GetResult<UsersBetPayload, S>

  type UsersBetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersBetFindManyArgs, 'select' | 'include'> & {
      select?: UsersBetCountAggregateInputType | true
    }

  export interface UsersBetDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersBet'], meta: { name: 'UsersBet' } }
    /**
     * Find zero or one UsersBet that matches the filter.
     * @param {UsersBetFindUniqueArgs} args - Arguments to find a UsersBet
     * @example
     * // Get one UsersBet
     * const usersBet = await prisma.usersBet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersBetFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersBetFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UsersBet'> extends True ? Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UsersBet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersBetFindUniqueOrThrowArgs} args - Arguments to find a UsersBet
     * @example
     * // Get one UsersBet
     * const usersBet = await prisma.usersBet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersBetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersBetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UsersBet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetFindFirstArgs} args - Arguments to find a UsersBet
     * @example
     * // Get one UsersBet
     * const usersBet = await prisma.usersBet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersBetFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersBetFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UsersBet'> extends True ? Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UsersBet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetFindFirstOrThrowArgs} args - Arguments to find a UsersBet
     * @example
     * // Get one UsersBet
     * const usersBet = await prisma.usersBet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersBetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersBetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UsersBets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersBets
     * const usersBets = await prisma.usersBet.findMany()
     * 
     * // Get first 10 UsersBets
     * const usersBets = await prisma.usersBet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersBetWithIdOnly = await prisma.usersBet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersBetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersBetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UsersBet.
     * @param {UsersBetCreateArgs} args - Arguments to create a UsersBet.
     * @example
     * // Create one UsersBet
     * const UsersBet = await prisma.usersBet.create({
     *   data: {
     *     // ... data to create a UsersBet
     *   }
     * })
     * 
    **/
    create<T extends UsersBetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersBetCreateArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UsersBets.
     *     @param {UsersBetCreateManyArgs} args - Arguments to create many UsersBets.
     *     @example
     *     // Create many UsersBets
     *     const usersBet = await prisma.usersBet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersBetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersBetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsersBet.
     * @param {UsersBetDeleteArgs} args - Arguments to delete one UsersBet.
     * @example
     * // Delete one UsersBet
     * const UsersBet = await prisma.usersBet.delete({
     *   where: {
     *     // ... filter to delete one UsersBet
     *   }
     * })
     * 
    **/
    delete<T extends UsersBetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersBetDeleteArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UsersBet.
     * @param {UsersBetUpdateArgs} args - Arguments to update one UsersBet.
     * @example
     * // Update one UsersBet
     * const usersBet = await prisma.usersBet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersBetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersBetUpdateArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UsersBets.
     * @param {UsersBetDeleteManyArgs} args - Arguments to filter UsersBets to delete.
     * @example
     * // Delete a few UsersBets
     * const { count } = await prisma.usersBet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersBetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersBetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersBets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersBets
     * const usersBet = await prisma.usersBet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersBetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersBetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersBet.
     * @param {UsersBetUpsertArgs} args - Arguments to update or create a UsersBet.
     * @example
     * // Update or create a UsersBet
     * const usersBet = await prisma.usersBet.upsert({
     *   create: {
     *     // ... data to create a UsersBet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersBet we want to update
     *   }
     * })
    **/
    upsert<T extends UsersBetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersBetUpsertArgs<ExtArgs>>
    ): Prisma__UsersBetClient<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UsersBets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetCountArgs} args - Arguments to filter UsersBets to count.
     * @example
     * // Count the number of UsersBets
     * const count = await prisma.usersBet.count({
     *   where: {
     *     // ... the filter for the UsersBets we want to count
     *   }
     * })
    **/
    count<T extends UsersBetCountArgs>(
      args?: Subset<T, UsersBetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersBetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersBet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersBetAggregateArgs>(args: Subset<T, UsersBetAggregateArgs>): Prisma.PrismaPromise<GetUsersBetAggregateType<T>>

    /**
     * Group by UsersBet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersBetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersBetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersBetGroupByArgs['orderBy'] }
        : { orderBy?: UsersBetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersBetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersBetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersBet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersBetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Challenge<T extends UsersBet$ChallengeArgs<ExtArgs> = {}>(args?: Subset<T, UsersBet$ChallengeArgs<ExtArgs>>): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UsersBet base type for findUnique actions
   */
  export type UsersBetFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter, which UsersBet to fetch.
     */
    where: UsersBetWhereUniqueInput
  }

  /**
   * UsersBet findUnique
   */
  export interface UsersBetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersBetFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UsersBet findUniqueOrThrow
   */
  export type UsersBetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter, which UsersBet to fetch.
     */
    where: UsersBetWhereUniqueInput
  }


  /**
   * UsersBet base type for findFirst actions
   */
  export type UsersBetFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter, which UsersBet to fetch.
     */
    where?: UsersBetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersBets to fetch.
     */
    orderBy?: Enumerable<UsersBetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersBets.
     */
    cursor?: UsersBetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersBets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersBets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersBets.
     */
    distinct?: Enumerable<UsersBetScalarFieldEnum>
  }

  /**
   * UsersBet findFirst
   */
  export interface UsersBetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersBetFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UsersBet findFirstOrThrow
   */
  export type UsersBetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter, which UsersBet to fetch.
     */
    where?: UsersBetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersBets to fetch.
     */
    orderBy?: Enumerable<UsersBetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersBets.
     */
    cursor?: UsersBetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersBets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersBets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersBets.
     */
    distinct?: Enumerable<UsersBetScalarFieldEnum>
  }


  /**
   * UsersBet findMany
   */
  export type UsersBetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter, which UsersBets to fetch.
     */
    where?: UsersBetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersBets to fetch.
     */
    orderBy?: Enumerable<UsersBetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersBets.
     */
    cursor?: UsersBetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersBets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersBets.
     */
    skip?: number
    distinct?: Enumerable<UsersBetScalarFieldEnum>
  }


  /**
   * UsersBet create
   */
  export type UsersBetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * The data needed to create a UsersBet.
     */
    data: XOR<UsersBetCreateInput, UsersBetUncheckedCreateInput>
  }


  /**
   * UsersBet createMany
   */
  export type UsersBetCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsersBets.
     */
    data: Enumerable<UsersBetCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UsersBet update
   */
  export type UsersBetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * The data needed to update a UsersBet.
     */
    data: XOR<UsersBetUpdateInput, UsersBetUncheckedUpdateInput>
    /**
     * Choose, which UsersBet to update.
     */
    where: UsersBetWhereUniqueInput
  }


  /**
   * UsersBet updateMany
   */
  export type UsersBetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsersBets.
     */
    data: XOR<UsersBetUpdateManyMutationInput, UsersBetUncheckedUpdateManyInput>
    /**
     * Filter which UsersBets to update
     */
    where?: UsersBetWhereInput
  }


  /**
   * UsersBet upsert
   */
  export type UsersBetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * The filter to search for the UsersBet to update in case it exists.
     */
    where: UsersBetWhereUniqueInput
    /**
     * In case the UsersBet found by the `where` argument doesn't exist, create a new UsersBet with this data.
     */
    create: XOR<UsersBetCreateInput, UsersBetUncheckedCreateInput>
    /**
     * In case the UsersBet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersBetUpdateInput, UsersBetUncheckedUpdateInput>
  }


  /**
   * UsersBet delete
   */
  export type UsersBetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    /**
     * Filter which UsersBet to delete.
     */
    where: UsersBetWhereUniqueInput
  }


  /**
   * UsersBet deleteMany
   */
  export type UsersBetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsersBets to delete
     */
    where?: UsersBetWhereInput
  }


  /**
   * UsersBet.Challenge
   */
  export type UsersBet$ChallengeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    where?: ChallengeWhereInput
  }


  /**
   * UsersBet without action
   */
  export type UsersBetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
  }



  /**
   * Model Challenge
   */


  export type AggregateChallenge = {
    _count: ChallengeCountAggregateOutputType | null
    _avg: ChallengeAvgAggregateOutputType | null
    _sum: ChallengeSumAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  export type ChallengeAvgAggregateOutputType = {
    creatorBid: number | null
    opponentBid: number | null
    timerPublic: number | null
    amount: number | null
  }

  export type ChallengeSumAggregateOutputType = {
    creatorBid: number | null
    opponentBid: number | null
    timerPublic: number | null
    amount: number | null
  }

  export type ChallengeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    completedAt: Date | null
    winnerId: string | null
    loserId: string | null
    creatorAnswer: boolean | null
    opponentAnswer: boolean | null
    creatorWinner: string | null
    opponentWinner: string | null
    creatorId: string | null
    opponentId: string | null
    creatorBid: number | null
    opponentBid: number | null
    status: string | null
    isPublic: boolean | null
    timerPublic: number | null
    contractTerms: string | null
    gameSelected: string | null
    description: string | null
    participantId: string | null
    amount: number | null
  }

  export type ChallengeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    completedAt: Date | null
    winnerId: string | null
    loserId: string | null
    creatorAnswer: boolean | null
    opponentAnswer: boolean | null
    creatorWinner: string | null
    opponentWinner: string | null
    creatorId: string | null
    opponentId: string | null
    creatorBid: number | null
    opponentBid: number | null
    status: string | null
    isPublic: boolean | null
    timerPublic: number | null
    contractTerms: string | null
    gameSelected: string | null
    description: string | null
    participantId: string | null
    amount: number | null
  }

  export type ChallengeCountAggregateOutputType = {
    id: number
    createdAt: number
    completedAt: number
    winnerId: number
    loserId: number
    creatorAnswer: number
    opponentAnswer: number
    creatorWinner: number
    opponentWinner: number
    creatorId: number
    opponentId: number
    creatorBid: number
    opponentBid: number
    status: number
    isPublic: number
    timerPublic: number
    contractTerms: number
    gameSelected: number
    description: number
    participantId: number
    amount: number
    _all: number
  }


  export type ChallengeAvgAggregateInputType = {
    creatorBid?: true
    opponentBid?: true
    timerPublic?: true
    amount?: true
  }

  export type ChallengeSumAggregateInputType = {
    creatorBid?: true
    opponentBid?: true
    timerPublic?: true
    amount?: true
  }

  export type ChallengeMinAggregateInputType = {
    id?: true
    createdAt?: true
    completedAt?: true
    winnerId?: true
    loserId?: true
    creatorAnswer?: true
    opponentAnswer?: true
    creatorWinner?: true
    opponentWinner?: true
    creatorId?: true
    opponentId?: true
    creatorBid?: true
    opponentBid?: true
    status?: true
    isPublic?: true
    timerPublic?: true
    contractTerms?: true
    gameSelected?: true
    description?: true
    participantId?: true
    amount?: true
  }

  export type ChallengeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    completedAt?: true
    winnerId?: true
    loserId?: true
    creatorAnswer?: true
    opponentAnswer?: true
    creatorWinner?: true
    opponentWinner?: true
    creatorId?: true
    opponentId?: true
    creatorBid?: true
    opponentBid?: true
    status?: true
    isPublic?: true
    timerPublic?: true
    contractTerms?: true
    gameSelected?: true
    description?: true
    participantId?: true
    amount?: true
  }

  export type ChallengeCountAggregateInputType = {
    id?: true
    createdAt?: true
    completedAt?: true
    winnerId?: true
    loserId?: true
    creatorAnswer?: true
    opponentAnswer?: true
    creatorWinner?: true
    opponentWinner?: true
    creatorId?: true
    opponentId?: true
    creatorBid?: true
    opponentBid?: true
    status?: true
    isPublic?: true
    timerPublic?: true
    contractTerms?: true
    gameSelected?: true
    description?: true
    participantId?: true
    amount?: true
    _all?: true
  }

  export type ChallengeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenge to aggregate.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Challenges
    **/
    _count?: true | ChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChallengeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChallengeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChallengeMaxAggregateInputType
  }

  export type GetChallengeAggregateType<T extends ChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChallenge[P]>
      : GetScalarType<T[P], AggregateChallenge[P]>
  }




  export type ChallengeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChallengeWhereInput
    orderBy?: Enumerable<ChallengeOrderByWithAggregationInput>
    by: ChallengeScalarFieldEnum[]
    having?: ChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChallengeCountAggregateInputType | true
    _avg?: ChallengeAvgAggregateInputType
    _sum?: ChallengeSumAggregateInputType
    _min?: ChallengeMinAggregateInputType
    _max?: ChallengeMaxAggregateInputType
  }


  export type ChallengeGroupByOutputType = {
    id: string
    createdAt: Date
    completedAt: Date | null
    winnerId: string | null
    loserId: string | null
    creatorAnswer: boolean
    opponentAnswer: boolean
    creatorWinner: string
    opponentWinner: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic: boolean
    timerPublic: number
    contractTerms: string | null
    gameSelected: string
    description: string | null
    participantId: string | null
    amount: number | null
    _count: ChallengeCountAggregateOutputType | null
    _avg: ChallengeAvgAggregateOutputType | null
    _sum: ChallengeSumAggregateOutputType | null
    _min: ChallengeMinAggregateOutputType | null
    _max: ChallengeMaxAggregateOutputType | null
  }

  type GetChallengeGroupByPayload<T extends ChallengeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], ChallengeGroupByOutputType[P]>
        }
      >
    >


  export type ChallengeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    completedAt?: boolean
    winnerId?: boolean
    loserId?: boolean
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: boolean
    opponentWinner?: boolean
    creatorId?: boolean
    opponentId?: boolean
    creatorBid?: boolean
    opponentBid?: boolean
    status?: boolean
    isPublic?: boolean
    timerPublic?: boolean
    contractTerms?: boolean
    gameSelected?: boolean
    description?: boolean
    participantId?: boolean
    amount?: boolean
    userBets?: boolean | Challenge$userBetsArgs<ExtArgs>
    winner?: boolean | Challenge$winnerArgs<ExtArgs>
    participant?: boolean | Challenge$participantArgs<ExtArgs>
    creator?: boolean | Challenge$creatorArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["challenge"]>

  export type ChallengeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    completedAt?: boolean
    winnerId?: boolean
    loserId?: boolean
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: boolean
    opponentWinner?: boolean
    creatorId?: boolean
    opponentId?: boolean
    creatorBid?: boolean
    opponentBid?: boolean
    status?: boolean
    isPublic?: boolean
    timerPublic?: boolean
    contractTerms?: boolean
    gameSelected?: boolean
    description?: boolean
    participantId?: boolean
    amount?: boolean
  }

  export type ChallengeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userBets?: boolean | Challenge$userBetsArgs<ExtArgs>
    winner?: boolean | Challenge$winnerArgs<ExtArgs>
    participant?: boolean | Challenge$participantArgs<ExtArgs>
    creator?: boolean | Challenge$creatorArgs<ExtArgs>
    _count?: boolean | ChallengeCountOutputTypeArgs<ExtArgs>
  }


  type ChallengeGetPayload<S extends boolean | null | undefined | ChallengeArgs> = $Types.GetResult<ChallengePayload, S>

  type ChallengeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChallengeFindManyArgs, 'select' | 'include'> & {
      select?: ChallengeCountAggregateInputType | true
    }

  export interface ChallengeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Challenge'], meta: { name: 'Challenge' } }
    /**
     * Find zero or one Challenge that matches the filter.
     * @param {ChallengeFindUniqueArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChallengeFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChallengeFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Challenge'> extends True ? Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Challenge that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChallengeFindUniqueOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChallengeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Challenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChallengeFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChallengeFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Challenge'> extends True ? Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Challenge that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindFirstOrThrowArgs} args - Arguments to find a Challenge
     * @example
     * // Get one Challenge
     * const challenge = await prisma.challenge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChallengeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Challenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Challenges
     * const challenges = await prisma.challenge.findMany()
     * 
     * // Get first 10 Challenges
     * const challenges = await prisma.challenge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const challengeWithIdOnly = await prisma.challenge.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChallengeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Challenge.
     * @param {ChallengeCreateArgs} args - Arguments to create a Challenge.
     * @example
     * // Create one Challenge
     * const Challenge = await prisma.challenge.create({
     *   data: {
     *     // ... data to create a Challenge
     *   }
     * })
     * 
    **/
    create<T extends ChallengeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeCreateArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Challenges.
     *     @param {ChallengeCreateManyArgs} args - Arguments to create many Challenges.
     *     @example
     *     // Create many Challenges
     *     const challenge = await prisma.challenge.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChallengeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Challenge.
     * @param {ChallengeDeleteArgs} args - Arguments to delete one Challenge.
     * @example
     * // Delete one Challenge
     * const Challenge = await prisma.challenge.delete({
     *   where: {
     *     // ... filter to delete one Challenge
     *   }
     * })
     * 
    **/
    delete<T extends ChallengeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeDeleteArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Challenge.
     * @param {ChallengeUpdateArgs} args - Arguments to update one Challenge.
     * @example
     * // Update one Challenge
     * const challenge = await prisma.challenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChallengeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeUpdateArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Challenges.
     * @param {ChallengeDeleteManyArgs} args - Arguments to filter Challenges to delete.
     * @example
     * // Delete a few Challenges
     * const { count } = await prisma.challenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChallengeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChallengeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Challenges
     * const challenge = await prisma.challenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChallengeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Challenge.
     * @param {ChallengeUpsertArgs} args - Arguments to update or create a Challenge.
     * @example
     * // Update or create a Challenge
     * const challenge = await prisma.challenge.upsert({
     *   create: {
     *     // ... data to create a Challenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Challenge we want to update
     *   }
     * })
    **/
    upsert<T extends ChallengeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChallengeUpsertArgs<ExtArgs>>
    ): Prisma__ChallengeClient<$Types.GetResult<ChallengePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Challenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeCountArgs} args - Arguments to filter Challenges to count.
     * @example
     * // Count the number of Challenges
     * const count = await prisma.challenge.count({
     *   where: {
     *     // ... the filter for the Challenges we want to count
     *   }
     * })
    **/
    count<T extends ChallengeCountArgs>(
      args?: Subset<T, ChallengeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChallengeAggregateArgs>(args: Subset<T, ChallengeAggregateArgs>): Prisma.PrismaPromise<GetChallengeAggregateType<T>>

    /**
     * Group by Challenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChallengeGroupByArgs['orderBy'] }
        : { orderBy?: ChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Challenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChallengeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    userBets<T extends Challenge$userBetsArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$userBetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UsersBetPayload<ExtArgs>, T, 'findMany', never>| Null>;

    winner<T extends Challenge$winnerArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$winnerArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    participant<T extends Challenge$participantArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$participantArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    creator<T extends Challenge$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Challenge$creatorArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Challenge base type for findUnique actions
   */
  export type ChallengeFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }

  /**
   * Challenge findUnique
   */
  export interface ChallengeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChallengeFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Challenge findUniqueOrThrow
   */
  export type ChallengeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge base type for findFirst actions
   */
  export type ChallengeFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }

  /**
   * Challenge findFirst
   */
  export interface ChallengeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChallengeFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Challenge findFirstOrThrow
   */
  export type ChallengeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenge to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Challenges.
     */
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * Challenge findMany
   */
  export type ChallengeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter, which Challenges to fetch.
     */
    where?: ChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Challenges to fetch.
     */
    orderBy?: Enumerable<ChallengeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Challenges.
     */
    cursor?: ChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Challenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Challenges.
     */
    skip?: number
    distinct?: Enumerable<ChallengeScalarFieldEnum>
  }


  /**
   * Challenge create
   */
  export type ChallengeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to create a Challenge.
     */
    data: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
  }


  /**
   * Challenge createMany
   */
  export type ChallengeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Challenges.
     */
    data: Enumerable<ChallengeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Challenge update
   */
  export type ChallengeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The data needed to update a Challenge.
     */
    data: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
    /**
     * Choose, which Challenge to update.
     */
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge updateMany
   */
  export type ChallengeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Challenges.
     */
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyInput>
    /**
     * Filter which Challenges to update
     */
    where?: ChallengeWhereInput
  }


  /**
   * Challenge upsert
   */
  export type ChallengeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * The filter to search for the Challenge to update in case it exists.
     */
    where: ChallengeWhereUniqueInput
    /**
     * In case the Challenge found by the `where` argument doesn't exist, create a new Challenge with this data.
     */
    create: XOR<ChallengeCreateInput, ChallengeUncheckedCreateInput>
    /**
     * In case the Challenge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChallengeUpdateInput, ChallengeUncheckedUpdateInput>
  }


  /**
   * Challenge delete
   */
  export type ChallengeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
    /**
     * Filter which Challenge to delete.
     */
    where: ChallengeWhereUniqueInput
  }


  /**
   * Challenge deleteMany
   */
  export type ChallengeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Challenges to delete
     */
    where?: ChallengeWhereInput
  }


  /**
   * Challenge.userBets
   */
  export type Challenge$userBetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersBet
     */
    select?: UsersBetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersBetInclude<ExtArgs> | null
    where?: UsersBetWhereInput
    orderBy?: Enumerable<UsersBetOrderByWithRelationInput>
    cursor?: UsersBetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersBetScalarFieldEnum>
  }


  /**
   * Challenge.winner
   */
  export type Challenge$winnerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Challenge.participant
   */
  export type Challenge$participantArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Challenge.creator
   */
  export type Challenge$creatorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Challenge without action
   */
  export type ChallengeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Challenge
     */
    select?: ChallengeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChallengeInclude<ExtArgs> | null
  }



  /**
   * Model Defi
   */


  export type AggregateDefi = {
    _count: DefiCountAggregateOutputType | null
    _avg: DefiAvgAggregateOutputType | null
    _sum: DefiSumAggregateOutputType | null
    _min: DefiMinAggregateOutputType | null
    _max: DefiMaxAggregateOutputType | null
  }

  export type DefiAvgAggregateOutputType = {
    creatorBid: number | null
    opponentBid: number | null
    timerPublic: number | null
  }

  export type DefiSumAggregateOutputType = {
    creatorBid: number | null
    opponentBid: number | null
    timerPublic: number | null
  }

  export type DefiMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    creatorId: string | null
    opponentId: string | null
    creatorHonor: boolean | null
    opponentHonor: boolean | null
    creatorBid: number | null
    opponentBid: number | null
    contractTerms: string | null
    gameSelected: string | null
    creatorAccepted: boolean | null
    opponentAccepted: boolean | null
    isPublic: boolean | null
    timerPublic: number | null
  }

  export type DefiMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    creatorId: string | null
    opponentId: string | null
    creatorHonor: boolean | null
    opponentHonor: boolean | null
    creatorBid: number | null
    opponentBid: number | null
    contractTerms: string | null
    gameSelected: string | null
    creatorAccepted: boolean | null
    opponentAccepted: boolean | null
    isPublic: boolean | null
    timerPublic: number | null
  }

  export type DefiCountAggregateOutputType = {
    id: number
    createdAt: number
    creatorId: number
    opponentId: number
    creatorHonor: number
    opponentHonor: number
    creatorBid: number
    opponentBid: number
    contractTerms: number
    gameSelected: number
    creatorAccepted: number
    opponentAccepted: number
    isPublic: number
    timerPublic: number
    _all: number
  }


  export type DefiAvgAggregateInputType = {
    creatorBid?: true
    opponentBid?: true
    timerPublic?: true
  }

  export type DefiSumAggregateInputType = {
    creatorBid?: true
    opponentBid?: true
    timerPublic?: true
  }

  export type DefiMinAggregateInputType = {
    id?: true
    createdAt?: true
    creatorId?: true
    opponentId?: true
    creatorHonor?: true
    opponentHonor?: true
    creatorBid?: true
    opponentBid?: true
    contractTerms?: true
    gameSelected?: true
    creatorAccepted?: true
    opponentAccepted?: true
    isPublic?: true
    timerPublic?: true
  }

  export type DefiMaxAggregateInputType = {
    id?: true
    createdAt?: true
    creatorId?: true
    opponentId?: true
    creatorHonor?: true
    opponentHonor?: true
    creatorBid?: true
    opponentBid?: true
    contractTerms?: true
    gameSelected?: true
    creatorAccepted?: true
    opponentAccepted?: true
    isPublic?: true
    timerPublic?: true
  }

  export type DefiCountAggregateInputType = {
    id?: true
    createdAt?: true
    creatorId?: true
    opponentId?: true
    creatorHonor?: true
    opponentHonor?: true
    creatorBid?: true
    opponentBid?: true
    contractTerms?: true
    gameSelected?: true
    creatorAccepted?: true
    opponentAccepted?: true
    isPublic?: true
    timerPublic?: true
    _all?: true
  }

  export type DefiAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Defi to aggregate.
     */
    where?: DefiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Defis to fetch.
     */
    orderBy?: Enumerable<DefiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DefiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Defis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Defis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Defis
    **/
    _count?: true | DefiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DefiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DefiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DefiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DefiMaxAggregateInputType
  }

  export type GetDefiAggregateType<T extends DefiAggregateArgs> = {
        [P in keyof T & keyof AggregateDefi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefi[P]>
      : GetScalarType<T[P], AggregateDefi[P]>
  }




  export type DefiGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DefiWhereInput
    orderBy?: Enumerable<DefiOrderByWithAggregationInput>
    by: DefiScalarFieldEnum[]
    having?: DefiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DefiCountAggregateInputType | true
    _avg?: DefiAvgAggregateInputType
    _sum?: DefiSumAggregateInputType
    _min?: DefiMinAggregateInputType
    _max?: DefiMaxAggregateInputType
  }


  export type DefiGroupByOutputType = {
    id: string
    createdAt: Date
    creatorId: string
    opponentId: string
    creatorHonor: boolean
    opponentHonor: boolean
    creatorBid: number
    opponentBid: number
    contractTerms: string
    gameSelected: string
    creatorAccepted: boolean
    opponentAccepted: boolean
    isPublic: boolean
    timerPublic: number
    _count: DefiCountAggregateOutputType | null
    _avg: DefiAvgAggregateOutputType | null
    _sum: DefiSumAggregateOutputType | null
    _min: DefiMinAggregateOutputType | null
    _max: DefiMaxAggregateOutputType | null
  }

  type GetDefiGroupByPayload<T extends DefiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DefiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DefiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DefiGroupByOutputType[P]>
            : GetScalarType<T[P], DefiGroupByOutputType[P]>
        }
      >
    >


  export type DefiSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    creatorId?: boolean
    opponentId?: boolean
    creatorHonor?: boolean
    opponentHonor?: boolean
    creatorBid?: boolean
    opponentBid?: boolean
    contractTerms?: boolean
    gameSelected?: boolean
    creatorAccepted?: boolean
    opponentAccepted?: boolean
    isPublic?: boolean
    timerPublic?: boolean
  }, ExtArgs["result"]["defi"]>

  export type DefiSelectScalar = {
    id?: boolean
    createdAt?: boolean
    creatorId?: boolean
    opponentId?: boolean
    creatorHonor?: boolean
    opponentHonor?: boolean
    creatorBid?: boolean
    opponentBid?: boolean
    contractTerms?: boolean
    gameSelected?: boolean
    creatorAccepted?: boolean
    opponentAccepted?: boolean
    isPublic?: boolean
    timerPublic?: boolean
  }


  type DefiGetPayload<S extends boolean | null | undefined | DefiArgs> = $Types.GetResult<DefiPayload, S>

  type DefiCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DefiFindManyArgs, 'select' | 'include'> & {
      select?: DefiCountAggregateInputType | true
    }

  export interface DefiDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Defi'], meta: { name: 'Defi' } }
    /**
     * Find zero or one Defi that matches the filter.
     * @param {DefiFindUniqueArgs} args - Arguments to find a Defi
     * @example
     * // Get one Defi
     * const defi = await prisma.defi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DefiFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DefiFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Defi'> extends True ? Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Defi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DefiFindUniqueOrThrowArgs} args - Arguments to find a Defi
     * @example
     * // Get one Defi
     * const defi = await prisma.defi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DefiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Defi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiFindFirstArgs} args - Arguments to find a Defi
     * @example
     * // Get one Defi
     * const defi = await prisma.defi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DefiFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DefiFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Defi'> extends True ? Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Defi that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiFindFirstOrThrowArgs} args - Arguments to find a Defi
     * @example
     * // Get one Defi
     * const defi = await prisma.defi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DefiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Defis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Defis
     * const defis = await prisma.defi.findMany()
     * 
     * // Get first 10 Defis
     * const defis = await prisma.defi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const defiWithIdOnly = await prisma.defi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DefiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DefiPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Defi.
     * @param {DefiCreateArgs} args - Arguments to create a Defi.
     * @example
     * // Create one Defi
     * const Defi = await prisma.defi.create({
     *   data: {
     *     // ... data to create a Defi
     *   }
     * })
     * 
    **/
    create<T extends DefiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DefiCreateArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Defis.
     *     @param {DefiCreateManyArgs} args - Arguments to create many Defis.
     *     @example
     *     // Create many Defis
     *     const defi = await prisma.defi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DefiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Defi.
     * @param {DefiDeleteArgs} args - Arguments to delete one Defi.
     * @example
     * // Delete one Defi
     * const Defi = await prisma.defi.delete({
     *   where: {
     *     // ... filter to delete one Defi
     *   }
     * })
     * 
    **/
    delete<T extends DefiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DefiDeleteArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Defi.
     * @param {DefiUpdateArgs} args - Arguments to update one Defi.
     * @example
     * // Update one Defi
     * const defi = await prisma.defi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DefiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DefiUpdateArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Defis.
     * @param {DefiDeleteManyArgs} args - Arguments to filter Defis to delete.
     * @example
     * // Delete a few Defis
     * const { count } = await prisma.defi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DefiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Defis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Defis
     * const defi = await prisma.defi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DefiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DefiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Defi.
     * @param {DefiUpsertArgs} args - Arguments to update or create a Defi.
     * @example
     * // Update or create a Defi
     * const defi = await prisma.defi.upsert({
     *   create: {
     *     // ... data to create a Defi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Defi we want to update
     *   }
     * })
    **/
    upsert<T extends DefiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DefiUpsertArgs<ExtArgs>>
    ): Prisma__DefiClient<$Types.GetResult<DefiPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Defis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiCountArgs} args - Arguments to filter Defis to count.
     * @example
     * // Count the number of Defis
     * const count = await prisma.defi.count({
     *   where: {
     *     // ... the filter for the Defis we want to count
     *   }
     * })
    **/
    count<T extends DefiCountArgs>(
      args?: Subset<T, DefiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Defi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefiAggregateArgs>(args: Subset<T, DefiAggregateArgs>): Prisma.PrismaPromise<GetDefiAggregateType<T>>

    /**
     * Group by Defi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DefiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefiGroupByArgs['orderBy'] }
        : { orderBy?: DefiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DefiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Defi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DefiClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Defi base type for findUnique actions
   */
  export type DefiFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter, which Defi to fetch.
     */
    where: DefiWhereUniqueInput
  }

  /**
   * Defi findUnique
   */
  export interface DefiFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DefiFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Defi findUniqueOrThrow
   */
  export type DefiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter, which Defi to fetch.
     */
    where: DefiWhereUniqueInput
  }


  /**
   * Defi base type for findFirst actions
   */
  export type DefiFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter, which Defi to fetch.
     */
    where?: DefiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Defis to fetch.
     */
    orderBy?: Enumerable<DefiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Defis.
     */
    cursor?: DefiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Defis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Defis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Defis.
     */
    distinct?: Enumerable<DefiScalarFieldEnum>
  }

  /**
   * Defi findFirst
   */
  export interface DefiFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DefiFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Defi findFirstOrThrow
   */
  export type DefiFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter, which Defi to fetch.
     */
    where?: DefiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Defis to fetch.
     */
    orderBy?: Enumerable<DefiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Defis.
     */
    cursor?: DefiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Defis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Defis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Defis.
     */
    distinct?: Enumerable<DefiScalarFieldEnum>
  }


  /**
   * Defi findMany
   */
  export type DefiFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter, which Defis to fetch.
     */
    where?: DefiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Defis to fetch.
     */
    orderBy?: Enumerable<DefiOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Defis.
     */
    cursor?: DefiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Defis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Defis.
     */
    skip?: number
    distinct?: Enumerable<DefiScalarFieldEnum>
  }


  /**
   * Defi create
   */
  export type DefiCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * The data needed to create a Defi.
     */
    data: XOR<DefiCreateInput, DefiUncheckedCreateInput>
  }


  /**
   * Defi createMany
   */
  export type DefiCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Defis.
     */
    data: Enumerable<DefiCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Defi update
   */
  export type DefiUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * The data needed to update a Defi.
     */
    data: XOR<DefiUpdateInput, DefiUncheckedUpdateInput>
    /**
     * Choose, which Defi to update.
     */
    where: DefiWhereUniqueInput
  }


  /**
   * Defi updateMany
   */
  export type DefiUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Defis.
     */
    data: XOR<DefiUpdateManyMutationInput, DefiUncheckedUpdateManyInput>
    /**
     * Filter which Defis to update
     */
    where?: DefiWhereInput
  }


  /**
   * Defi upsert
   */
  export type DefiUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * The filter to search for the Defi to update in case it exists.
     */
    where: DefiWhereUniqueInput
    /**
     * In case the Defi found by the `where` argument doesn't exist, create a new Defi with this data.
     */
    create: XOR<DefiCreateInput, DefiUncheckedCreateInput>
    /**
     * In case the Defi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DefiUpdateInput, DefiUncheckedUpdateInput>
  }


  /**
   * Defi delete
   */
  export type DefiDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
    /**
     * Filter which Defi to delete.
     */
    where: DefiWhereUniqueInput
  }


  /**
   * Defi deleteMany
   */
  export type DefiDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Defis to delete
     */
    where?: DefiWhereInput
  }


  /**
   * Defi without action
   */
  export type DefiArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Defi
     */
    select?: DefiSelect<ExtArgs> | null
  }



  /**
   * Model DefiRequest
   */


  export type AggregateDefiRequest = {
    _count: DefiRequestCountAggregateOutputType | null
    _min: DefiRequestMinAggregateOutputType | null
    _max: DefiRequestMaxAggregateOutputType | null
  }

  export type DefiRequestMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    senderUsername: string | null
    receiverUsername: string | null
  }

  export type DefiRequestMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    senderUsername: string | null
    receiverUsername: string | null
  }

  export type DefiRequestCountAggregateOutputType = {
    id: number
    createdAt: number
    senderUsername: number
    receiverUsername: number
    _all: number
  }


  export type DefiRequestMinAggregateInputType = {
    id?: true
    createdAt?: true
    senderUsername?: true
    receiverUsername?: true
  }

  export type DefiRequestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    senderUsername?: true
    receiverUsername?: true
  }

  export type DefiRequestCountAggregateInputType = {
    id?: true
    createdAt?: true
    senderUsername?: true
    receiverUsername?: true
    _all?: true
  }

  export type DefiRequestAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefiRequest to aggregate.
     */
    where?: DefiRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiRequests to fetch.
     */
    orderBy?: Enumerable<DefiRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DefiRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DefiRequests
    **/
    _count?: true | DefiRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DefiRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DefiRequestMaxAggregateInputType
  }

  export type GetDefiRequestAggregateType<T extends DefiRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDefiRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefiRequest[P]>
      : GetScalarType<T[P], AggregateDefiRequest[P]>
  }




  export type DefiRequestGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DefiRequestWhereInput
    orderBy?: Enumerable<DefiRequestOrderByWithAggregationInput>
    by: DefiRequestScalarFieldEnum[]
    having?: DefiRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DefiRequestCountAggregateInputType | true
    _min?: DefiRequestMinAggregateInputType
    _max?: DefiRequestMaxAggregateInputType
  }


  export type DefiRequestGroupByOutputType = {
    id: string
    createdAt: Date
    senderUsername: string
    receiverUsername: string
    _count: DefiRequestCountAggregateOutputType | null
    _min: DefiRequestMinAggregateOutputType | null
    _max: DefiRequestMaxAggregateOutputType | null
  }

  type GetDefiRequestGroupByPayload<T extends DefiRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DefiRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DefiRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DefiRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DefiRequestGroupByOutputType[P]>
        }
      >
    >


  export type DefiRequestSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    senderUsername?: boolean
    receiverUsername?: boolean
  }, ExtArgs["result"]["defiRequest"]>

  export type DefiRequestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    senderUsername?: boolean
    receiverUsername?: boolean
  }


  type DefiRequestGetPayload<S extends boolean | null | undefined | DefiRequestArgs> = $Types.GetResult<DefiRequestPayload, S>

  type DefiRequestCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DefiRequestFindManyArgs, 'select' | 'include'> & {
      select?: DefiRequestCountAggregateInputType | true
    }

  export interface DefiRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DefiRequest'], meta: { name: 'DefiRequest' } }
    /**
     * Find zero or one DefiRequest that matches the filter.
     * @param {DefiRequestFindUniqueArgs} args - Arguments to find a DefiRequest
     * @example
     * // Get one DefiRequest
     * const defiRequest = await prisma.defiRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DefiRequestFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DefiRequestFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DefiRequest'> extends True ? Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one DefiRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DefiRequestFindUniqueOrThrowArgs} args - Arguments to find a DefiRequest
     * @example
     * // Get one DefiRequest
     * const defiRequest = await prisma.defiRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DefiRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first DefiRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestFindFirstArgs} args - Arguments to find a DefiRequest
     * @example
     * // Get one DefiRequest
     * const defiRequest = await prisma.defiRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DefiRequestFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DefiRequestFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DefiRequest'> extends True ? Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first DefiRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestFindFirstOrThrowArgs} args - Arguments to find a DefiRequest
     * @example
     * // Get one DefiRequest
     * const defiRequest = await prisma.defiRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DefiRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more DefiRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DefiRequests
     * const defiRequests = await prisma.defiRequest.findMany()
     * 
     * // Get first 10 DefiRequests
     * const defiRequests = await prisma.defiRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const defiRequestWithIdOnly = await prisma.defiRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DefiRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a DefiRequest.
     * @param {DefiRequestCreateArgs} args - Arguments to create a DefiRequest.
     * @example
     * // Create one DefiRequest
     * const DefiRequest = await prisma.defiRequest.create({
     *   data: {
     *     // ... data to create a DefiRequest
     *   }
     * })
     * 
    **/
    create<T extends DefiRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DefiRequestCreateArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many DefiRequests.
     *     @param {DefiRequestCreateManyArgs} args - Arguments to create many DefiRequests.
     *     @example
     *     // Create many DefiRequests
     *     const defiRequest = await prisma.defiRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DefiRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DefiRequest.
     * @param {DefiRequestDeleteArgs} args - Arguments to delete one DefiRequest.
     * @example
     * // Delete one DefiRequest
     * const DefiRequest = await prisma.defiRequest.delete({
     *   where: {
     *     // ... filter to delete one DefiRequest
     *   }
     * })
     * 
    **/
    delete<T extends DefiRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DefiRequestDeleteArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one DefiRequest.
     * @param {DefiRequestUpdateArgs} args - Arguments to update one DefiRequest.
     * @example
     * // Update one DefiRequest
     * const defiRequest = await prisma.defiRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DefiRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DefiRequestUpdateArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more DefiRequests.
     * @param {DefiRequestDeleteManyArgs} args - Arguments to filter DefiRequests to delete.
     * @example
     * // Delete a few DefiRequests
     * const { count } = await prisma.defiRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DefiRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefiRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DefiRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DefiRequests
     * const defiRequest = await prisma.defiRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DefiRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DefiRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DefiRequest.
     * @param {DefiRequestUpsertArgs} args - Arguments to update or create a DefiRequest.
     * @example
     * // Update or create a DefiRequest
     * const defiRequest = await prisma.defiRequest.upsert({
     *   create: {
     *     // ... data to create a DefiRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DefiRequest we want to update
     *   }
     * })
    **/
    upsert<T extends DefiRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DefiRequestUpsertArgs<ExtArgs>>
    ): Prisma__DefiRequestClient<$Types.GetResult<DefiRequestPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of DefiRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestCountArgs} args - Arguments to filter DefiRequests to count.
     * @example
     * // Count the number of DefiRequests
     * const count = await prisma.defiRequest.count({
     *   where: {
     *     // ... the filter for the DefiRequests we want to count
     *   }
     * })
    **/
    count<T extends DefiRequestCountArgs>(
      args?: Subset<T, DefiRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefiRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DefiRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefiRequestAggregateArgs>(args: Subset<T, DefiRequestAggregateArgs>): Prisma.PrismaPromise<GetDefiRequestAggregateType<T>>

    /**
     * Group by DefiRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DefiRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefiRequestGroupByArgs['orderBy'] }
        : { orderBy?: DefiRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DefiRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefiRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DefiRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DefiRequestClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DefiRequest base type for findUnique actions
   */
  export type DefiRequestFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter, which DefiRequest to fetch.
     */
    where: DefiRequestWhereUniqueInput
  }

  /**
   * DefiRequest findUnique
   */
  export interface DefiRequestFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DefiRequestFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DefiRequest findUniqueOrThrow
   */
  export type DefiRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter, which DefiRequest to fetch.
     */
    where: DefiRequestWhereUniqueInput
  }


  /**
   * DefiRequest base type for findFirst actions
   */
  export type DefiRequestFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter, which DefiRequest to fetch.
     */
    where?: DefiRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiRequests to fetch.
     */
    orderBy?: Enumerable<DefiRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefiRequests.
     */
    cursor?: DefiRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefiRequests.
     */
    distinct?: Enumerable<DefiRequestScalarFieldEnum>
  }

  /**
   * DefiRequest findFirst
   */
  export interface DefiRequestFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DefiRequestFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DefiRequest findFirstOrThrow
   */
  export type DefiRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter, which DefiRequest to fetch.
     */
    where?: DefiRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiRequests to fetch.
     */
    orderBy?: Enumerable<DefiRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefiRequests.
     */
    cursor?: DefiRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefiRequests.
     */
    distinct?: Enumerable<DefiRequestScalarFieldEnum>
  }


  /**
   * DefiRequest findMany
   */
  export type DefiRequestFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter, which DefiRequests to fetch.
     */
    where?: DefiRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiRequests to fetch.
     */
    orderBy?: Enumerable<DefiRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DefiRequests.
     */
    cursor?: DefiRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiRequests.
     */
    skip?: number
    distinct?: Enumerable<DefiRequestScalarFieldEnum>
  }


  /**
   * DefiRequest create
   */
  export type DefiRequestCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * The data needed to create a DefiRequest.
     */
    data: XOR<DefiRequestCreateInput, DefiRequestUncheckedCreateInput>
  }


  /**
   * DefiRequest createMany
   */
  export type DefiRequestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DefiRequests.
     */
    data: Enumerable<DefiRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DefiRequest update
   */
  export type DefiRequestUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * The data needed to update a DefiRequest.
     */
    data: XOR<DefiRequestUpdateInput, DefiRequestUncheckedUpdateInput>
    /**
     * Choose, which DefiRequest to update.
     */
    where: DefiRequestWhereUniqueInput
  }


  /**
   * DefiRequest updateMany
   */
  export type DefiRequestUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DefiRequests.
     */
    data: XOR<DefiRequestUpdateManyMutationInput, DefiRequestUncheckedUpdateManyInput>
    /**
     * Filter which DefiRequests to update
     */
    where?: DefiRequestWhereInput
  }


  /**
   * DefiRequest upsert
   */
  export type DefiRequestUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * The filter to search for the DefiRequest to update in case it exists.
     */
    where: DefiRequestWhereUniqueInput
    /**
     * In case the DefiRequest found by the `where` argument doesn't exist, create a new DefiRequest with this data.
     */
    create: XOR<DefiRequestCreateInput, DefiRequestUncheckedCreateInput>
    /**
     * In case the DefiRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DefiRequestUpdateInput, DefiRequestUncheckedUpdateInput>
  }


  /**
   * DefiRequest delete
   */
  export type DefiRequestDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
    /**
     * Filter which DefiRequest to delete.
     */
    where: DefiRequestWhereUniqueInput
  }


  /**
   * DefiRequest deleteMany
   */
  export type DefiRequestDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefiRequests to delete
     */
    where?: DefiRequestWhereInput
  }


  /**
   * DefiRequest without action
   */
  export type DefiRequestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiRequest
     */
    select?: DefiRequestSelect<ExtArgs> | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: VerificationTokenScalarFieldEnum[]
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenArgs> = $Types.GetResult<VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VerificationToken base type for findUnique actions
   */
  export type VerificationTokenFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUnique
   */
  export interface VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationTokenFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken base type for findFirst actions
   */
  export type VerificationTokenFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }

  /**
   * VerificationToken findFirst
   */
  export interface VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationTokenFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }



  /**
   * Model Event
   */


  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    limitedSeats: number | null
  }

  export type EventSumAggregateOutputType = {
    limitedSeats: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    label: string | null
    day: string | null
    limitedSeats: number | null
    isFull: boolean | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    label: string | null
    day: string | null
    limitedSeats: number | null
    isFull: boolean | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    label: number
    day: number
    limitedSeats: number
    participantsUsernames: number
    isFull: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    limitedSeats?: true
  }

  export type EventSumAggregateInputType = {
    limitedSeats?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    label?: true
    day?: true
    limitedSeats?: true
    isFull?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    label?: true
    day?: true
    limitedSeats?: true
    isFull?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    label?: true
    day?: true
    limitedSeats?: true
    participantsUsernames?: true
    isFull?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithAggregationInput>
    by: EventScalarFieldEnum[]
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }


  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string
    label: string
    day: string
    limitedSeats: number | null
    participantsUsernames: string[]
    isFull: boolean
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    label?: boolean
    day?: boolean
    limitedSeats?: boolean
    participantsUsernames?: boolean
    isFull?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    label?: boolean
    day?: boolean
    limitedSeats?: boolean
    participantsUsernames?: boolean
    isFull?: boolean
  }


  type EventGetPayload<S extends boolean | null | undefined | EventArgs> = $Types.GetResult<EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Event'> extends True ? Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Event'> extends True ? Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EventPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventCreateArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventDeleteArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpsertArgs<ExtArgs>>
    ): Prisma__EventClient<$Types.GetResult<EventPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Event base type for findUnique actions
   */
  export type EventFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUnique
   */
  export interface EventFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event base type for findFirst actions
   */
  export type EventFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }

  /**
   * Event findFirst
   */
  export interface EventFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: Enumerable<EventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }


  /**
   * Event without action
   */
  export type EventArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    friends: 'friends',
    friendsRequests: 'friendsRequests',
    access_token: 'access_token',
    balance: 'balance',
    status: 'status',
    statusMessage: 'statusMessage'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChallengeHistoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt'
  };

  export type ChallengeHistoryScalarFieldEnum = (typeof ChallengeHistoryScalarFieldEnum)[keyof typeof ChallengeHistoryScalarFieldEnum]


  export const UsersBetScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    winnerId: 'winnerId',
    userId: 'userId',
    amount: 'amount',
    challengeId: 'challengeId'
  };

  export type UsersBetScalarFieldEnum = (typeof UsersBetScalarFieldEnum)[keyof typeof UsersBetScalarFieldEnum]


  export const ChallengeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    winnerId: 'winnerId',
    loserId: 'loserId',
    creatorAnswer: 'creatorAnswer',
    opponentAnswer: 'opponentAnswer',
    creatorWinner: 'creatorWinner',
    opponentWinner: 'opponentWinner',
    creatorId: 'creatorId',
    opponentId: 'opponentId',
    creatorBid: 'creatorBid',
    opponentBid: 'opponentBid',
    status: 'status',
    isPublic: 'isPublic',
    timerPublic: 'timerPublic',
    contractTerms: 'contractTerms',
    gameSelected: 'gameSelected',
    description: 'description',
    participantId: 'participantId',
    amount: 'amount'
  };

  export type ChallengeScalarFieldEnum = (typeof ChallengeScalarFieldEnum)[keyof typeof ChallengeScalarFieldEnum]


  export const DefiScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    creatorId: 'creatorId',
    opponentId: 'opponentId',
    creatorHonor: 'creatorHonor',
    opponentHonor: 'opponentHonor',
    creatorBid: 'creatorBid',
    opponentBid: 'opponentBid',
    contractTerms: 'contractTerms',
    gameSelected: 'gameSelected',
    creatorAccepted: 'creatorAccepted',
    opponentAccepted: 'opponentAccepted',
    isPublic: 'isPublic',
    timerPublic: 'timerPublic'
  };

  export type DefiScalarFieldEnum = (typeof DefiScalarFieldEnum)[keyof typeof DefiScalarFieldEnum]


  export const DefiRequestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    senderUsername: 'senderUsername',
    receiverUsername: 'receiverUsername'
  };

  export type DefiRequestScalarFieldEnum = (typeof DefiRequestScalarFieldEnum)[keyof typeof DefiRequestScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    label: 'label',
    day: 'day',
    limitedSeats: 'limitedSeats',
    participantsUsernames: 'participantsUsernames',
    isFull: 'isFull'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    friends?: StringNullableListFilter<"User">
    friendsRequests?: StringNullableListFilter<"User">
    access_token?: StringNullableFilter<"User"> | string | null
    balance?: IntFilter<"User"> | number
    status?: StringFilter<"User"> | string
    statusMessage?: StringNullableFilter<"User"> | string | null
    challenges?: ChallengeListRelationFilter
    participations?: ChallengeListRelationFilter
    wonChallenges?: ChallengeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    friends?: SortOrder
    friendsRequests?: SortOrder
    access_token?: SortOrderInput | SortOrder
    balance?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrderInput | SortOrder
    challenges?: ChallengeOrderByRelationAggregateInput
    participations?: ChallengeOrderByRelationAggregateInput
    wonChallenges?: ChallengeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    friends?: StringNullableListFilter<"User">
    friendsRequests?: StringNullableListFilter<"User">
    access_token?: StringNullableFilter<"User"> | string | null
    balance?: IntFilter<"User"> | number
    status?: StringFilter<"User"> | string
    statusMessage?: StringNullableFilter<"User"> | string | null
    challenges?: ChallengeListRelationFilter
    participations?: ChallengeListRelationFilter
    wonChallenges?: ChallengeListRelationFilter
  }, "id" | "name" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    friends?: SortOrder
    friendsRequests?: SortOrder
    access_token?: SortOrderInput | SortOrder
    balance?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    friends?: StringNullableListFilter<"User">
    friendsRequests?: StringNullableListFilter<"User">
    access_token?: StringNullableWithAggregatesFilter<"User"> | string | null
    balance?: IntWithAggregatesFilter<"User"> | number
    status?: StringWithAggregatesFilter<"User"> | string
    statusMessage?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ChallengeHistoryWhereInput = {
    AND?: Enumerable<ChallengeHistoryWhereInput>
    OR?: Enumerable<ChallengeHistoryWhereInput>
    NOT?: Enumerable<ChallengeHistoryWhereInput>
    id?: StringFilter<"ChallengeHistory"> | string
    createdAt?: DateTimeFilter<"ChallengeHistory"> | Date | string
  }

  export type ChallengeHistoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<ChallengeHistoryWhereInput>
    OR?: Enumerable<ChallengeHistoryWhereInput>
    NOT?: Enumerable<ChallengeHistoryWhereInput>
    createdAt?: DateTimeFilter<"ChallengeHistory"> | Date | string
  }, "id">

  export type ChallengeHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    _count?: ChallengeHistoryCountOrderByAggregateInput
    _max?: ChallengeHistoryMaxOrderByAggregateInput
    _min?: ChallengeHistoryMinOrderByAggregateInput
  }

  export type ChallengeHistoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChallengeHistoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChallengeHistoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChallengeHistoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"ChallengeHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChallengeHistory"> | Date | string
  }

  export type UsersBetWhereInput = {
    AND?: Enumerable<UsersBetWhereInput>
    OR?: Enumerable<UsersBetWhereInput>
    NOT?: Enumerable<UsersBetWhereInput>
    id?: StringFilter<"UsersBet"> | string
    createdAt?: DateTimeFilter<"UsersBet"> | Date | string
    winnerId?: StringFilter<"UsersBet"> | string
    userId?: StringFilter<"UsersBet"> | string
    amount?: IntFilter<"UsersBet"> | number
    challengeId?: StringNullableFilter<"UsersBet"> | string | null
    Challenge?: XOR<ChallengeNullableRelationFilter, ChallengeWhereInput> | null
  }

  export type UsersBetOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    winnerId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    challengeId?: SortOrderInput | SortOrder
    Challenge?: ChallengeOrderByWithRelationInput
  }

  export type UsersBetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<UsersBetWhereInput>
    OR?: Enumerable<UsersBetWhereInput>
    NOT?: Enumerable<UsersBetWhereInput>
    createdAt?: DateTimeFilter<"UsersBet"> | Date | string
    winnerId?: StringFilter<"UsersBet"> | string
    userId?: StringFilter<"UsersBet"> | string
    amount?: IntFilter<"UsersBet"> | number
    challengeId?: StringNullableFilter<"UsersBet"> | string | null
    Challenge?: XOR<ChallengeNullableRelationFilter, ChallengeWhereInput> | null
  }, "id">

  export type UsersBetOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    winnerId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    challengeId?: SortOrderInput | SortOrder
    _count?: UsersBetCountOrderByAggregateInput
    _avg?: UsersBetAvgOrderByAggregateInput
    _max?: UsersBetMaxOrderByAggregateInput
    _min?: UsersBetMinOrderByAggregateInput
    _sum?: UsersBetSumOrderByAggregateInput
  }

  export type UsersBetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersBetScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersBetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersBetScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"UsersBet"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UsersBet"> | Date | string
    winnerId?: StringWithAggregatesFilter<"UsersBet"> | string
    userId?: StringWithAggregatesFilter<"UsersBet"> | string
    amount?: IntWithAggregatesFilter<"UsersBet"> | number
    challengeId?: StringNullableWithAggregatesFilter<"UsersBet"> | string | null
  }

  export type ChallengeWhereInput = {
    AND?: Enumerable<ChallengeWhereInput>
    OR?: Enumerable<ChallengeWhereInput>
    NOT?: Enumerable<ChallengeWhereInput>
    id?: StringFilter<"Challenge"> | string
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
    completedAt?: DateTimeNullableFilter<"Challenge"> | Date | string | null
    winnerId?: StringNullableFilter<"Challenge"> | string | null
    loserId?: StringNullableFilter<"Challenge"> | string | null
    creatorAnswer?: BoolFilter<"Challenge"> | boolean
    opponentAnswer?: BoolFilter<"Challenge"> | boolean
    creatorWinner?: StringFilter<"Challenge"> | string
    opponentWinner?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    opponentId?: StringFilter<"Challenge"> | string
    creatorBid?: IntFilter<"Challenge"> | number
    opponentBid?: IntFilter<"Challenge"> | number
    status?: StringFilter<"Challenge"> | string
    isPublic?: BoolFilter<"Challenge"> | boolean
    timerPublic?: IntFilter<"Challenge"> | number
    contractTerms?: StringNullableFilter<"Challenge"> | string | null
    gameSelected?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    participantId?: StringNullableFilter<"Challenge"> | string | null
    amount?: IntNullableFilter<"Challenge"> | number | null
    userBets?: UsersBetListRelationFilter
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    participant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ChallengeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    loserId?: SortOrderInput | SortOrder
    creatorAnswer?: SortOrder
    opponentAnswer?: SortOrder
    creatorWinner?: SortOrder
    opponentWinner?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    contractTerms?: SortOrderInput | SortOrder
    gameSelected?: SortOrder
    description?: SortOrderInput | SortOrder
    participantId?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    userBets?: UsersBetOrderByRelationAggregateInput
    winner?: UserOrderByWithRelationInput
    participant?: UserOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type ChallengeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<ChallengeWhereInput>
    OR?: Enumerable<ChallengeWhereInput>
    NOT?: Enumerable<ChallengeWhereInput>
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
    completedAt?: DateTimeNullableFilter<"Challenge"> | Date | string | null
    winnerId?: StringNullableFilter<"Challenge"> | string | null
    loserId?: StringNullableFilter<"Challenge"> | string | null
    creatorAnswer?: BoolFilter<"Challenge"> | boolean
    opponentAnswer?: BoolFilter<"Challenge"> | boolean
    creatorWinner?: StringFilter<"Challenge"> | string
    opponentWinner?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    opponentId?: StringFilter<"Challenge"> | string
    creatorBid?: IntFilter<"Challenge"> | number
    opponentBid?: IntFilter<"Challenge"> | number
    status?: StringFilter<"Challenge"> | string
    isPublic?: BoolFilter<"Challenge"> | boolean
    timerPublic?: IntFilter<"Challenge"> | number
    contractTerms?: StringNullableFilter<"Challenge"> | string | null
    gameSelected?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    participantId?: StringNullableFilter<"Challenge"> | string | null
    amount?: IntNullableFilter<"Challenge"> | number | null
    userBets?: UsersBetListRelationFilter
    winner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    participant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChallengeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    loserId?: SortOrderInput | SortOrder
    creatorAnswer?: SortOrder
    opponentAnswer?: SortOrder
    creatorWinner?: SortOrder
    opponentWinner?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    contractTerms?: SortOrderInput | SortOrder
    gameSelected?: SortOrder
    description?: SortOrderInput | SortOrder
    participantId?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    _count?: ChallengeCountOrderByAggregateInput
    _avg?: ChallengeAvgOrderByAggregateInput
    _max?: ChallengeMaxOrderByAggregateInput
    _min?: ChallengeMinOrderByAggregateInput
    _sum?: ChallengeSumOrderByAggregateInput
  }

  export type ChallengeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChallengeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"Challenge"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Challenge"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Challenge"> | Date | string | null
    winnerId?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    loserId?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    creatorAnswer?: BoolWithAggregatesFilter<"Challenge"> | boolean
    opponentAnswer?: BoolWithAggregatesFilter<"Challenge"> | boolean
    creatorWinner?: StringWithAggregatesFilter<"Challenge"> | string
    opponentWinner?: StringWithAggregatesFilter<"Challenge"> | string
    creatorId?: StringWithAggregatesFilter<"Challenge"> | string
    opponentId?: StringWithAggregatesFilter<"Challenge"> | string
    creatorBid?: IntWithAggregatesFilter<"Challenge"> | number
    opponentBid?: IntWithAggregatesFilter<"Challenge"> | number
    status?: StringWithAggregatesFilter<"Challenge"> | string
    isPublic?: BoolWithAggregatesFilter<"Challenge"> | boolean
    timerPublic?: IntWithAggregatesFilter<"Challenge"> | number
    contractTerms?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    gameSelected?: StringWithAggregatesFilter<"Challenge"> | string
    description?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    participantId?: StringNullableWithAggregatesFilter<"Challenge"> | string | null
    amount?: IntNullableWithAggregatesFilter<"Challenge"> | number | null
  }

  export type DefiWhereInput = {
    AND?: Enumerable<DefiWhereInput>
    OR?: Enumerable<DefiWhereInput>
    NOT?: Enumerable<DefiWhereInput>
    id?: StringFilter<"Defi"> | string
    createdAt?: DateTimeFilter<"Defi"> | Date | string
    creatorId?: StringFilter<"Defi"> | string
    opponentId?: StringFilter<"Defi"> | string
    creatorHonor?: BoolFilter<"Defi"> | boolean
    opponentHonor?: BoolFilter<"Defi"> | boolean
    creatorBid?: IntFilter<"Defi"> | number
    opponentBid?: IntFilter<"Defi"> | number
    contractTerms?: StringFilter<"Defi"> | string
    gameSelected?: StringFilter<"Defi"> | string
    creatorAccepted?: BoolFilter<"Defi"> | boolean
    opponentAccepted?: BoolFilter<"Defi"> | boolean
    isPublic?: BoolFilter<"Defi"> | boolean
    timerPublic?: IntFilter<"Defi"> | number
  }

  export type DefiOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorHonor?: SortOrder
    opponentHonor?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    creatorAccepted?: SortOrder
    opponentAccepted?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    creatorId?: string
    opponentId?: string
    AND?: Enumerable<DefiWhereInput>
    OR?: Enumerable<DefiWhereInput>
    NOT?: Enumerable<DefiWhereInput>
    createdAt?: DateTimeFilter<"Defi"> | Date | string
    creatorHonor?: BoolFilter<"Defi"> | boolean
    opponentHonor?: BoolFilter<"Defi"> | boolean
    creatorBid?: IntFilter<"Defi"> | number
    opponentBid?: IntFilter<"Defi"> | number
    contractTerms?: StringFilter<"Defi"> | string
    gameSelected?: StringFilter<"Defi"> | string
    creatorAccepted?: BoolFilter<"Defi"> | boolean
    opponentAccepted?: BoolFilter<"Defi"> | boolean
    isPublic?: BoolFilter<"Defi"> | boolean
    timerPublic?: IntFilter<"Defi"> | number
  }, "id" | "creatorId" | "opponentId">

  export type DefiOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorHonor?: SortOrder
    opponentHonor?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    creatorAccepted?: SortOrder
    opponentAccepted?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    _count?: DefiCountOrderByAggregateInput
    _avg?: DefiAvgOrderByAggregateInput
    _max?: DefiMaxOrderByAggregateInput
    _min?: DefiMinOrderByAggregateInput
    _sum?: DefiSumOrderByAggregateInput
  }

  export type DefiScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DefiScalarWhereWithAggregatesInput>
    OR?: Enumerable<DefiScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DefiScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"Defi"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Defi"> | Date | string
    creatorId?: StringWithAggregatesFilter<"Defi"> | string
    opponentId?: StringWithAggregatesFilter<"Defi"> | string
    creatorHonor?: BoolWithAggregatesFilter<"Defi"> | boolean
    opponentHonor?: BoolWithAggregatesFilter<"Defi"> | boolean
    creatorBid?: IntWithAggregatesFilter<"Defi"> | number
    opponentBid?: IntWithAggregatesFilter<"Defi"> | number
    contractTerms?: StringWithAggregatesFilter<"Defi"> | string
    gameSelected?: StringWithAggregatesFilter<"Defi"> | string
    creatorAccepted?: BoolWithAggregatesFilter<"Defi"> | boolean
    opponentAccepted?: BoolWithAggregatesFilter<"Defi"> | boolean
    isPublic?: BoolWithAggregatesFilter<"Defi"> | boolean
    timerPublic?: IntWithAggregatesFilter<"Defi"> | number
  }

  export type DefiRequestWhereInput = {
    AND?: Enumerable<DefiRequestWhereInput>
    OR?: Enumerable<DefiRequestWhereInput>
    NOT?: Enumerable<DefiRequestWhereInput>
    id?: StringFilter<"DefiRequest"> | string
    createdAt?: DateTimeFilter<"DefiRequest"> | Date | string
    senderUsername?: StringFilter<"DefiRequest"> | string
    receiverUsername?: StringFilter<"DefiRequest"> | string
  }

  export type DefiRequestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    senderUsername?: SortOrder
    receiverUsername?: SortOrder
  }

  export type DefiRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<DefiRequestWhereInput>
    OR?: Enumerable<DefiRequestWhereInput>
    NOT?: Enumerable<DefiRequestWhereInput>
    createdAt?: DateTimeFilter<"DefiRequest"> | Date | string
    senderUsername?: StringFilter<"DefiRequest"> | string
    receiverUsername?: StringFilter<"DefiRequest"> | string
  }, "id">

  export type DefiRequestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    senderUsername?: SortOrder
    receiverUsername?: SortOrder
    _count?: DefiRequestCountOrderByAggregateInput
    _max?: DefiRequestMaxOrderByAggregateInput
    _min?: DefiRequestMinOrderByAggregateInput
  }

  export type DefiRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DefiRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<DefiRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DefiRequestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"DefiRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DefiRequest"> | Date | string
    senderUsername?: StringWithAggregatesFilter<"DefiRequest"> | string
    receiverUsername?: StringWithAggregatesFilter<"DefiRequest"> | string
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type EventWhereInput = {
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    label?: StringFilter<"Event"> | string
    day?: StringFilter<"Event"> | string
    limitedSeats?: IntNullableFilter<"Event"> | number | null
    participantsUsernames?: StringNullableListFilter<"Event">
    isFull?: BoolFilter<"Event"> | boolean
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    label?: SortOrder
    day?: SortOrder
    limitedSeats?: SortOrderInput | SortOrder
    participantsUsernames?: SortOrder
    isFull?: SortOrder
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    label?: StringFilter<"Event"> | string
    day?: StringFilter<"Event"> | string
    limitedSeats?: IntNullableFilter<"Event"> | number | null
    participantsUsernames?: StringNullableListFilter<"Event">
    isFull?: BoolFilter<"Event"> | boolean
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    label?: SortOrder
    day?: SortOrder
    limitedSeats?: SortOrderInput | SortOrder
    participantsUsernames?: SortOrder
    isFull?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    label?: StringWithAggregatesFilter<"Event"> | string
    day?: StringWithAggregatesFilter<"Event"> | string
    limitedSeats?: IntNullableWithAggregatesFilter<"Event"> | number | null
    participantsUsernames?: StringNullableListFilter<"Event">
    isFull?: BoolWithAggregatesFilter<"Event"> | boolean
  }

  export type AccountCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeCreateNestedManyWithoutCreatorInput
    participations?: ChallengeCreateNestedManyWithoutParticipantInput
    wonChallenges?: ChallengeCreateNestedManyWithoutWinnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    participations?: ChallengeUncheckedCreateNestedManyWithoutParticipantInput
    wonChallenges?: ChallengeUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUpdateManyWithoutCreatorNestedInput
    participations?: ChallengeUpdateManyWithoutParticipantNestedInput
    wonChallenges?: ChallengeUpdateManyWithoutWinnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    participations?: ChallengeUncheckedUpdateManyWithoutParticipantNestedInput
    wonChallenges?: ChallengeUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeHistoryCreateInput = {
    id?: string
    createdAt?: Date | string
  }

  export type ChallengeHistoryUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
  }

  export type ChallengeHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeHistoryCreateManyInput = {
    id?: string
    createdAt?: Date | string
  }

  export type ChallengeHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChallengeHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersBetCreateInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
    Challenge?: ChallengeCreateNestedOneWithoutUserBetsInput
  }

  export type UsersBetUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
    challengeId?: string | null
  }

  export type UsersBetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    Challenge?: ChallengeUpdateOneWithoutUserBetsNestedInput
  }

  export type UsersBetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    challengeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersBetCreateManyInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
    challengeId?: string | null
  }

  export type UsersBetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type UsersBetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    challengeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChallengeCreateInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    userBets?: UsersBetCreateNestedManyWithoutChallengeInput
    winner?: UserCreateNestedOneWithoutWonChallengesInput
    participant?: UserCreateNestedOneWithoutParticipationsInput
    creator?: UserCreateNestedOneWithoutChallengesInput
  }

  export type ChallengeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
    userBets?: UsersBetUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUpdateManyWithoutChallengeNestedInput
    winner?: UserUpdateOneWithoutWonChallengesNestedInput
    participant?: UserUpdateOneWithoutParticipationsNestedInput
    creator?: UserUpdateOneWithoutChallengesNestedInput
  }

  export type ChallengeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
  }

  export type ChallengeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChallengeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DefiCreateInput = {
    id?: string
    createdAt?: Date | string
    creatorId: string
    opponentId: string
    creatorHonor: boolean
    opponentHonor: boolean
    creatorBid: number
    opponentBid: number
    contractTerms: string
    gameSelected: string
    creatorAccepted?: boolean
    opponentAccepted?: boolean
    isPublic?: boolean
    timerPublic?: number
  }

  export type DefiUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    creatorId: string
    opponentId: string
    creatorHonor: boolean
    opponentHonor: boolean
    creatorBid: number
    opponentBid: number
    contractTerms: string
    gameSelected: string
    creatorAccepted?: boolean
    opponentAccepted?: boolean
    isPublic?: boolean
    timerPublic?: number
  }

  export type DefiUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorHonor?: BoolFieldUpdateOperationsInput | boolean
    opponentHonor?: BoolFieldUpdateOperationsInput | boolean
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    contractTerms?: StringFieldUpdateOperationsInput | string
    gameSelected?: StringFieldUpdateOperationsInput | string
    creatorAccepted?: BoolFieldUpdateOperationsInput | boolean
    opponentAccepted?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
  }

  export type DefiUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorHonor?: BoolFieldUpdateOperationsInput | boolean
    opponentHonor?: BoolFieldUpdateOperationsInput | boolean
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    contractTerms?: StringFieldUpdateOperationsInput | string
    gameSelected?: StringFieldUpdateOperationsInput | string
    creatorAccepted?: BoolFieldUpdateOperationsInput | boolean
    opponentAccepted?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
  }

  export type DefiCreateManyInput = {
    id?: string
    createdAt?: Date | string
    creatorId: string
    opponentId: string
    creatorHonor: boolean
    opponentHonor: boolean
    creatorBid: number
    opponentBid: number
    contractTerms: string
    gameSelected: string
    creatorAccepted?: boolean
    opponentAccepted?: boolean
    isPublic?: boolean
    timerPublic?: number
  }

  export type DefiUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorHonor?: BoolFieldUpdateOperationsInput | boolean
    opponentHonor?: BoolFieldUpdateOperationsInput | boolean
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    contractTerms?: StringFieldUpdateOperationsInput | string
    gameSelected?: StringFieldUpdateOperationsInput | string
    creatorAccepted?: BoolFieldUpdateOperationsInput | boolean
    opponentAccepted?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
  }

  export type DefiUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorHonor?: BoolFieldUpdateOperationsInput | boolean
    opponentHonor?: BoolFieldUpdateOperationsInput | boolean
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    contractTerms?: StringFieldUpdateOperationsInput | string
    gameSelected?: StringFieldUpdateOperationsInput | string
    creatorAccepted?: BoolFieldUpdateOperationsInput | boolean
    opponentAccepted?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
  }

  export type DefiRequestCreateInput = {
    id?: string
    createdAt?: Date | string
    senderUsername: string
    receiverUsername: string
  }

  export type DefiRequestUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    senderUsername: string
    receiverUsername: string
  }

  export type DefiRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderUsername?: StringFieldUpdateOperationsInput | string
    receiverUsername?: StringFieldUpdateOperationsInput | string
  }

  export type DefiRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderUsername?: StringFieldUpdateOperationsInput | string
    receiverUsername?: StringFieldUpdateOperationsInput | string
  }

  export type DefiRequestCreateManyInput = {
    id?: string
    createdAt?: Date | string
    senderUsername: string
    receiverUsername: string
  }

  export type DefiRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderUsername?: StringFieldUpdateOperationsInput | string
    receiverUsername?: StringFieldUpdateOperationsInput | string
  }

  export type DefiRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderUsername?: StringFieldUpdateOperationsInput | string
    receiverUsername?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description: string
    label: string
    day: string
    limitedSeats?: number | null
    participantsUsernames?: EventCreateparticipantsUsernamesInput | Enumerable<string>
    isFull?: boolean
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    label: string
    day: string
    limitedSeats?: number | null
    participantsUsernames?: EventCreateparticipantsUsernamesInput | Enumerable<string>
    isFull?: boolean
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    limitedSeats?: NullableIntFieldUpdateOperationsInput | number | null
    participantsUsernames?: EventUpdateparticipantsUsernamesInput | Enumerable<string>
    isFull?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    limitedSeats?: NullableIntFieldUpdateOperationsInput | number | null
    participantsUsernames?: EventUpdateparticipantsUsernamesInput | Enumerable<string>
    isFull?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description: string
    label: string
    day: string
    limitedSeats?: number | null
    participantsUsernames?: EventCreateparticipantsUsernamesInput | Enumerable<string>
    isFull?: boolean
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    limitedSeats?: NullableIntFieldUpdateOperationsInput | number | null
    participantsUsernames?: EventUpdateparticipantsUsernamesInput | Enumerable<string>
    isFull?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    day?: StringFieldUpdateOperationsInput | string
    limitedSeats?: NullableIntFieldUpdateOperationsInput | number | null
    participantsUsernames?: EventUpdateparticipantsUsernamesInput | Enumerable<string>
    isFull?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    hasSome?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ChallengeListRelationFilter = {
    every?: ChallengeWhereInput
    some?: ChallengeWhereInput
    none?: ChallengeWhereInput
  }

  export type ChallengeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    friends?: SortOrder
    friendsRequests?: SortOrder
    access_token?: SortOrder
    balance?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    access_token?: SortOrder
    balance?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    access_token?: SortOrder
    balance?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ChallengeHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type ChallengeNullableRelationFilter = {
    is?: ChallengeWhereInput | null
    isNot?: ChallengeWhereInput | null
  }

  export type UsersBetCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    winnerId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    challengeId?: SortOrder
  }

  export type UsersBetAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UsersBetMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    winnerId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    challengeId?: SortOrder
  }

  export type UsersBetMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    winnerId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    challengeId?: SortOrder
  }

  export type UsersBetSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsersBetListRelationFilter = {
    every?: UsersBetWhereInput
    some?: UsersBetWhereInput
    none?: UsersBetWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UsersBetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChallengeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    creatorAnswer?: SortOrder
    opponentAnswer?: SortOrder
    creatorWinner?: SortOrder
    opponentWinner?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    description?: SortOrder
    participantId?: SortOrder
    amount?: SortOrder
  }

  export type ChallengeAvgOrderByAggregateInput = {
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    timerPublic?: SortOrder
    amount?: SortOrder
  }

  export type ChallengeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    creatorAnswer?: SortOrder
    opponentAnswer?: SortOrder
    creatorWinner?: SortOrder
    opponentWinner?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    description?: SortOrder
    participantId?: SortOrder
    amount?: SortOrder
  }

  export type ChallengeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    winnerId?: SortOrder
    loserId?: SortOrder
    creatorAnswer?: SortOrder
    opponentAnswer?: SortOrder
    creatorWinner?: SortOrder
    opponentWinner?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    status?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    description?: SortOrder
    participantId?: SortOrder
    amount?: SortOrder
  }

  export type ChallengeSumOrderByAggregateInput = {
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    timerPublic?: SortOrder
    amount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DefiCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorHonor?: SortOrder
    opponentHonor?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    creatorAccepted?: SortOrder
    opponentAccepted?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiAvgOrderByAggregateInput = {
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorHonor?: SortOrder
    opponentHonor?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    creatorAccepted?: SortOrder
    opponentAccepted?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    creatorId?: SortOrder
    opponentId?: SortOrder
    creatorHonor?: SortOrder
    opponentHonor?: SortOrder
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    contractTerms?: SortOrder
    gameSelected?: SortOrder
    creatorAccepted?: SortOrder
    opponentAccepted?: SortOrder
    isPublic?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiSumOrderByAggregateInput = {
    creatorBid?: SortOrder
    opponentBid?: SortOrder
    timerPublic?: SortOrder
  }

  export type DefiRequestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    senderUsername?: SortOrder
    receiverUsername?: SortOrder
  }

  export type DefiRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    senderUsername?: SortOrder
    receiverUsername?: SortOrder
  }

  export type DefiRequestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    senderUsername?: SortOrder
    receiverUsername?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    label?: SortOrder
    day?: SortOrder
    limitedSeats?: SortOrder
    participantsUsernames?: SortOrder
    isFull?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    limitedSeats?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    label?: SortOrder
    day?: SortOrder
    limitedSeats?: SortOrder
    isFull?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    label?: SortOrder
    day?: SortOrder
    limitedSeats?: SortOrder
    isFull?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    limitedSeats?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserCreatefriendsInput = {
    set: Enumerable<string>
  }

  export type UserCreatefriendsRequestsInput = {
    set: Enumerable<string>
  }

  export type ChallengeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCreatorInput>, Enumerable<ChallengeUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCreatorInput>
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type ChallengeCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutParticipantInput>, Enumerable<ChallengeUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutParticipantInput>
    createMany?: ChallengeCreateManyParticipantInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type ChallengeCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutWinnerInput>, Enumerable<ChallengeUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutWinnerInput>
    createMany?: ChallengeCreateManyWinnerInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type ChallengeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCreatorInput>, Enumerable<ChallengeUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCreatorInput>
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type ChallengeUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutParticipantInput>, Enumerable<ChallengeUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutParticipantInput>
    createMany?: ChallengeCreateManyParticipantInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type ChallengeUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutWinnerInput>, Enumerable<ChallengeUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutWinnerInput>
    createMany?: ChallengeCreateManyWinnerInputEnvelope
    connect?: Enumerable<ChallengeWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdatefriendsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserUpdatefriendsRequestsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChallengeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCreatorInput>, Enumerable<ChallengeUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutParticipantInput>, Enumerable<ChallengeUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: ChallengeCreateManyParticipantInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutWinnerInput>, Enumerable<ChallengeUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutWinnerInput>
    createMany?: ChallengeCreateManyWinnerInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutCreatorInput>, Enumerable<ChallengeUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: ChallengeCreateManyCreatorInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutParticipantInput>, Enumerable<ChallengeUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: ChallengeCreateManyParticipantInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<Enumerable<ChallengeCreateWithoutWinnerInput>, Enumerable<ChallengeUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<ChallengeCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<ChallengeUpsertWithWhereUniqueWithoutWinnerInput>
    createMany?: ChallengeCreateManyWinnerInputEnvelope
    set?: Enumerable<ChallengeWhereUniqueInput>
    disconnect?: Enumerable<ChallengeWhereUniqueInput>
    delete?: Enumerable<ChallengeWhereUniqueInput>
    connect?: Enumerable<ChallengeWhereUniqueInput>
    update?: Enumerable<ChallengeUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<ChallengeUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<ChallengeScalarWhereInput>
  }

  export type ChallengeCreateNestedOneWithoutUserBetsInput = {
    create?: XOR<ChallengeCreateWithoutUserBetsInput, ChallengeUncheckedCreateWithoutUserBetsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutUserBetsInput
    connect?: ChallengeWhereUniqueInput
  }

  export type ChallengeUpdateOneWithoutUserBetsNestedInput = {
    create?: XOR<ChallengeCreateWithoutUserBetsInput, ChallengeUncheckedCreateWithoutUserBetsInput>
    connectOrCreate?: ChallengeCreateOrConnectWithoutUserBetsInput
    upsert?: ChallengeUpsertWithoutUserBetsInput
    disconnect?: ChallengeWhereInput | boolean
    delete?: ChallengeWhereInput | boolean
    connect?: ChallengeWhereUniqueInput
    update?: XOR<XOR<ChallengeUpdateToOneWithWhereWithoutUserBetsInput, ChallengeUpdateWithoutUserBetsInput>, ChallengeUncheckedUpdateWithoutUserBetsInput>
  }

  export type UsersBetCreateNestedManyWithoutChallengeInput = {
    create?: XOR<Enumerable<UsersBetCreateWithoutChallengeInput>, Enumerable<UsersBetUncheckedCreateWithoutChallengeInput>>
    connectOrCreate?: Enumerable<UsersBetCreateOrConnectWithoutChallengeInput>
    createMany?: UsersBetCreateManyChallengeInputEnvelope
    connect?: Enumerable<UsersBetWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutWonChallengesInput = {
    create?: XOR<UserCreateWithoutWonChallengesInput, UserUncheckedCreateWithoutWonChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWonChallengesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChallengesInput = {
    create?: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesInput
    connect?: UserWhereUniqueInput
  }

  export type UsersBetUncheckedCreateNestedManyWithoutChallengeInput = {
    create?: XOR<Enumerable<UsersBetCreateWithoutChallengeInput>, Enumerable<UsersBetUncheckedCreateWithoutChallengeInput>>
    connectOrCreate?: Enumerable<UsersBetCreateOrConnectWithoutChallengeInput>
    createMany?: UsersBetCreateManyChallengeInputEnvelope
    connect?: Enumerable<UsersBetWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersBetUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<Enumerable<UsersBetCreateWithoutChallengeInput>, Enumerable<UsersBetUncheckedCreateWithoutChallengeInput>>
    connectOrCreate?: Enumerable<UsersBetCreateOrConnectWithoutChallengeInput>
    upsert?: Enumerable<UsersBetUpsertWithWhereUniqueWithoutChallengeInput>
    createMany?: UsersBetCreateManyChallengeInputEnvelope
    set?: Enumerable<UsersBetWhereUniqueInput>
    disconnect?: Enumerable<UsersBetWhereUniqueInput>
    delete?: Enumerable<UsersBetWhereUniqueInput>
    connect?: Enumerable<UsersBetWhereUniqueInput>
    update?: Enumerable<UsersBetUpdateWithWhereUniqueWithoutChallengeInput>
    updateMany?: Enumerable<UsersBetUpdateManyWithWhereWithoutChallengeInput>
    deleteMany?: Enumerable<UsersBetScalarWhereInput>
  }

  export type UserUpdateOneWithoutWonChallengesNestedInput = {
    create?: XOR<UserCreateWithoutWonChallengesInput, UserUncheckedCreateWithoutWonChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWonChallengesInput
    upsert?: UserUpsertWithoutWonChallengesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWonChallengesInput, UserUpdateWithoutWonChallengesInput>, UserUncheckedUpdateWithoutWonChallengesInput>
  }

  export type UserUpdateOneWithoutParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    upsert?: UserUpsertWithoutParticipationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipationsInput, UserUpdateWithoutParticipationsInput>, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserUpdateOneWithoutChallengesNestedInput = {
    create?: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChallengesInput
    upsert?: UserUpsertWithoutChallengesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChallengesInput, UserUpdateWithoutChallengesInput>, UserUncheckedUpdateWithoutChallengesInput>
  }

  export type UsersBetUncheckedUpdateManyWithoutChallengeNestedInput = {
    create?: XOR<Enumerable<UsersBetCreateWithoutChallengeInput>, Enumerable<UsersBetUncheckedCreateWithoutChallengeInput>>
    connectOrCreate?: Enumerable<UsersBetCreateOrConnectWithoutChallengeInput>
    upsert?: Enumerable<UsersBetUpsertWithWhereUniqueWithoutChallengeInput>
    createMany?: UsersBetCreateManyChallengeInputEnvelope
    set?: Enumerable<UsersBetWhereUniqueInput>
    disconnect?: Enumerable<UsersBetWhereUniqueInput>
    delete?: Enumerable<UsersBetWhereUniqueInput>
    connect?: Enumerable<UsersBetWhereUniqueInput>
    update?: Enumerable<UsersBetUpdateWithWhereUniqueWithoutChallengeInput>
    updateMany?: Enumerable<UsersBetUpdateManyWithWhereWithoutChallengeInput>
    deleteMany?: Enumerable<UsersBetScalarWhereInput>
  }

  export type EventCreateparticipantsUsernamesInput = {
    set: Enumerable<string>
  }

  export type EventUpdateparticipantsUsernamesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<string> | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: Enumerable<number> | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<number> | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    notIn?: Enumerable<number> | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: Enumerable<number> | ListFloatFieldRefInput<$PrismaModel>
    notIn?: Enumerable<number> | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ChallengeCreateWithoutCreatorInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    userBets?: UsersBetCreateNestedManyWithoutChallengeInput
    winner?: UserCreateNestedOneWithoutWonChallengesInput
    participant?: UserCreateNestedOneWithoutParticipationsInput
  }

  export type ChallengeUncheckedCreateWithoutCreatorInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
    userBets?: UsersBetUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput>
  }

  export type ChallengeCreateManyCreatorInputEnvelope = {
    data: Enumerable<ChallengeCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type ChallengeCreateWithoutParticipantInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    userBets?: UsersBetCreateNestedManyWithoutChallengeInput
    winner?: UserCreateNestedOneWithoutWonChallengesInput
    creator?: UserCreateNestedOneWithoutChallengesInput
  }

  export type ChallengeUncheckedCreateWithoutParticipantInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    userBets?: UsersBetUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutParticipantInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutParticipantInput, ChallengeUncheckedCreateWithoutParticipantInput>
  }

  export type ChallengeCreateManyParticipantInputEnvelope = {
    data: Enumerable<ChallengeCreateManyParticipantInput>
    skipDuplicates?: boolean
  }

  export type ChallengeCreateWithoutWinnerInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    userBets?: UsersBetCreateNestedManyWithoutChallengeInput
    participant?: UserCreateNestedOneWithoutParticipationsInput
    creator?: UserCreateNestedOneWithoutChallengesInput
  }

  export type ChallengeUncheckedCreateWithoutWinnerInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
    userBets?: UsersBetUncheckedCreateNestedManyWithoutChallengeInput
  }

  export type ChallengeCreateOrConnectWithoutWinnerInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutWinnerInput, ChallengeUncheckedCreateWithoutWinnerInput>
  }

  export type ChallengeCreateManyWinnerInputEnvelope = {
    data: Enumerable<ChallengeCreateManyWinnerInput>
    skipDuplicates?: boolean
  }

  export type ChallengeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutCreatorInput, ChallengeUncheckedUpdateWithoutCreatorInput>
    create: XOR<ChallengeCreateWithoutCreatorInput, ChallengeUncheckedCreateWithoutCreatorInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutCreatorInput, ChallengeUncheckedUpdateWithoutCreatorInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutCreatorInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChallengeScalarWhereInput = {
    AND?: Enumerable<ChallengeScalarWhereInput>
    OR?: Enumerable<ChallengeScalarWhereInput>
    NOT?: Enumerable<ChallengeScalarWhereInput>
    id?: StringFilter<"Challenge"> | string
    createdAt?: DateTimeFilter<"Challenge"> | Date | string
    completedAt?: DateTimeNullableFilter<"Challenge"> | Date | string | null
    winnerId?: StringNullableFilter<"Challenge"> | string | null
    loserId?: StringNullableFilter<"Challenge"> | string | null
    creatorAnswer?: BoolFilter<"Challenge"> | boolean
    opponentAnswer?: BoolFilter<"Challenge"> | boolean
    creatorWinner?: StringFilter<"Challenge"> | string
    opponentWinner?: StringFilter<"Challenge"> | string
    creatorId?: StringFilter<"Challenge"> | string
    opponentId?: StringFilter<"Challenge"> | string
    creatorBid?: IntFilter<"Challenge"> | number
    opponentBid?: IntFilter<"Challenge"> | number
    status?: StringFilter<"Challenge"> | string
    isPublic?: BoolFilter<"Challenge"> | boolean
    timerPublic?: IntFilter<"Challenge"> | number
    contractTerms?: StringNullableFilter<"Challenge"> | string | null
    gameSelected?: StringFilter<"Challenge"> | string
    description?: StringNullableFilter<"Challenge"> | string | null
    participantId?: StringNullableFilter<"Challenge"> | string | null
    amount?: IntNullableFilter<"Challenge"> | number | null
  }

  export type ChallengeUpsertWithWhereUniqueWithoutParticipantInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutParticipantInput, ChallengeUncheckedUpdateWithoutParticipantInput>
    create: XOR<ChallengeCreateWithoutParticipantInput, ChallengeUncheckedCreateWithoutParticipantInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutParticipantInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutParticipantInput, ChallengeUncheckedUpdateWithoutParticipantInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutParticipantInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutParticipantInput>
  }

  export type ChallengeUpsertWithWhereUniqueWithoutWinnerInput = {
    where: ChallengeWhereUniqueInput
    update: XOR<ChallengeUpdateWithoutWinnerInput, ChallengeUncheckedUpdateWithoutWinnerInput>
    create: XOR<ChallengeCreateWithoutWinnerInput, ChallengeUncheckedCreateWithoutWinnerInput>
  }

  export type ChallengeUpdateWithWhereUniqueWithoutWinnerInput = {
    where: ChallengeWhereUniqueInput
    data: XOR<ChallengeUpdateWithoutWinnerInput, ChallengeUncheckedUpdateWithoutWinnerInput>
  }

  export type ChallengeUpdateManyWithWhereWithoutWinnerInput = {
    where: ChallengeScalarWhereInput
    data: XOR<ChallengeUpdateManyMutationInput, ChallengeUncheckedUpdateManyWithoutWinnerInput>
  }

  export type ChallengeCreateWithoutUserBetsInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
    winner?: UserCreateNestedOneWithoutWonChallengesInput
    participant?: UserCreateNestedOneWithoutParticipationsInput
    creator?: UserCreateNestedOneWithoutChallengesInput
  }

  export type ChallengeUncheckedCreateWithoutUserBetsInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
  }

  export type ChallengeCreateOrConnectWithoutUserBetsInput = {
    where: ChallengeWhereUniqueInput
    create: XOR<ChallengeCreateWithoutUserBetsInput, ChallengeUncheckedCreateWithoutUserBetsInput>
  }

  export type ChallengeUpsertWithoutUserBetsInput = {
    update: XOR<ChallengeUpdateWithoutUserBetsInput, ChallengeUncheckedUpdateWithoutUserBetsInput>
    create: XOR<ChallengeCreateWithoutUserBetsInput, ChallengeUncheckedCreateWithoutUserBetsInput>
    where?: ChallengeWhereInput
  }

  export type ChallengeUpdateToOneWithWhereWithoutUserBetsInput = {
    where?: ChallengeWhereInput
    data: XOR<ChallengeUpdateWithoutUserBetsInput, ChallengeUncheckedUpdateWithoutUserBetsInput>
  }

  export type ChallengeUpdateWithoutUserBetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    winner?: UserUpdateOneWithoutWonChallengesNestedInput
    participant?: UserUpdateOneWithoutParticipationsNestedInput
    creator?: UserUpdateOneWithoutChallengesNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutUserBetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersBetCreateWithoutChallengeInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
  }

  export type UsersBetUncheckedCreateWithoutChallengeInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
  }

  export type UsersBetCreateOrConnectWithoutChallengeInput = {
    where: UsersBetWhereUniqueInput
    create: XOR<UsersBetCreateWithoutChallengeInput, UsersBetUncheckedCreateWithoutChallengeInput>
  }

  export type UsersBetCreateManyChallengeInputEnvelope = {
    data: Enumerable<UsersBetCreateManyChallengeInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWonChallengesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeCreateNestedManyWithoutCreatorInput
    participations?: ChallengeCreateNestedManyWithoutParticipantInput
  }

  export type UserUncheckedCreateWithoutWonChallengesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    participations?: ChallengeUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type UserCreateOrConnectWithoutWonChallengesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWonChallengesInput, UserUncheckedCreateWithoutWonChallengesInput>
  }

  export type UserCreateWithoutParticipationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeCreateNestedManyWithoutCreatorInput
    wonChallenges?: ChallengeCreateNestedManyWithoutWinnerInput
  }

  export type UserUncheckedCreateWithoutParticipationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    challenges?: ChallengeUncheckedCreateNestedManyWithoutCreatorInput
    wonChallenges?: ChallengeUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type UserCreateOrConnectWithoutParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
  }

  export type UserCreateWithoutChallengesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    participations?: ChallengeCreateNestedManyWithoutParticipantInput
    wonChallenges?: ChallengeCreateNestedManyWithoutWinnerInput
  }

  export type UserUncheckedCreateWithoutChallengesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    friends?: UserCreatefriendsInput | Enumerable<string>
    friendsRequests?: UserCreatefriendsRequestsInput | Enumerable<string>
    access_token?: string | null
    balance?: number
    status?: string
    statusMessage?: string | null
    participations?: ChallengeUncheckedCreateNestedManyWithoutParticipantInput
    wonChallenges?: ChallengeUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type UserCreateOrConnectWithoutChallengesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
  }

  export type UsersBetUpsertWithWhereUniqueWithoutChallengeInput = {
    where: UsersBetWhereUniqueInput
    update: XOR<UsersBetUpdateWithoutChallengeInput, UsersBetUncheckedUpdateWithoutChallengeInput>
    create: XOR<UsersBetCreateWithoutChallengeInput, UsersBetUncheckedCreateWithoutChallengeInput>
  }

  export type UsersBetUpdateWithWhereUniqueWithoutChallengeInput = {
    where: UsersBetWhereUniqueInput
    data: XOR<UsersBetUpdateWithoutChallengeInput, UsersBetUncheckedUpdateWithoutChallengeInput>
  }

  export type UsersBetUpdateManyWithWhereWithoutChallengeInput = {
    where: UsersBetScalarWhereInput
    data: XOR<UsersBetUpdateManyMutationInput, UsersBetUncheckedUpdateManyWithoutChallengeInput>
  }

  export type UsersBetScalarWhereInput = {
    AND?: Enumerable<UsersBetScalarWhereInput>
    OR?: Enumerable<UsersBetScalarWhereInput>
    NOT?: Enumerable<UsersBetScalarWhereInput>
    id?: StringFilter<"UsersBet"> | string
    createdAt?: DateTimeFilter<"UsersBet"> | Date | string
    winnerId?: StringFilter<"UsersBet"> | string
    userId?: StringFilter<"UsersBet"> | string
    amount?: IntFilter<"UsersBet"> | number
    challengeId?: StringNullableFilter<"UsersBet"> | string | null
  }

  export type UserUpsertWithoutWonChallengesInput = {
    update: XOR<UserUpdateWithoutWonChallengesInput, UserUncheckedUpdateWithoutWonChallengesInput>
    create: XOR<UserCreateWithoutWonChallengesInput, UserUncheckedCreateWithoutWonChallengesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWonChallengesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWonChallengesInput, UserUncheckedUpdateWithoutWonChallengesInput>
  }

  export type UserUpdateWithoutWonChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUpdateManyWithoutCreatorNestedInput
    participations?: ChallengeUpdateManyWithoutParticipantNestedInput
  }

  export type UserUncheckedUpdateWithoutWonChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    participations?: ChallengeUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type UserUpsertWithoutParticipationsInput = {
    update: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUpdateManyWithoutCreatorNestedInput
    wonChallenges?: ChallengeUpdateManyWithoutWinnerNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    challenges?: ChallengeUncheckedUpdateManyWithoutCreatorNestedInput
    wonChallenges?: ChallengeUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserUpsertWithoutChallengesInput = {
    update: XOR<UserUpdateWithoutChallengesInput, UserUncheckedUpdateWithoutChallengesInput>
    create: XOR<UserCreateWithoutChallengesInput, UserUncheckedCreateWithoutChallengesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChallengesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChallengesInput, UserUncheckedUpdateWithoutChallengesInput>
  }

  export type UserUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    participations?: ChallengeUpdateManyWithoutParticipantNestedInput
    wonChallenges?: ChallengeUpdateManyWithoutWinnerNestedInput
  }

  export type UserUncheckedUpdateWithoutChallengesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    friends?: UserUpdatefriendsInput | Enumerable<string>
    friendsRequests?: UserUpdatefriendsRequestsInput | Enumerable<string>
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    participations?: ChallengeUncheckedUpdateManyWithoutParticipantNestedInput
    wonChallenges?: ChallengeUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ChallengeCreateManyCreatorInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
  }

  export type ChallengeCreateManyParticipantInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    winnerId?: string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    amount?: number | null
  }

  export type ChallengeCreateManyWinnerInput = {
    id?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    loserId?: string | null
    creatorAnswer?: boolean
    opponentAnswer?: boolean
    creatorWinner?: string
    opponentWinner?: string
    creatorId: string
    opponentId: string
    creatorBid: number
    opponentBid: number
    status: string
    isPublic?: boolean
    timerPublic?: number
    contractTerms?: string | null
    gameSelected: string
    description?: string | null
    participantId?: string | null
    amount?: number | null
  }

  export type ChallengeUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUpdateManyWithoutChallengeNestedInput
    winner?: UserUpdateOneWithoutWonChallengesNestedInput
    participant?: UserUpdateOneWithoutParticipationsNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChallengeUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUpdateManyWithoutChallengeNestedInput
    winner?: UserUpdateOneWithoutWonChallengesNestedInput
    creator?: UserUpdateOneWithoutChallengesNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateManyWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChallengeUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUpdateManyWithoutChallengeNestedInput
    participant?: UserUpdateOneWithoutParticipationsNestedInput
    creator?: UserUpdateOneWithoutChallengesNestedInput
  }

  export type ChallengeUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    userBets?: UsersBetUncheckedUpdateManyWithoutChallengeNestedInput
  }

  export type ChallengeUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loserId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorAnswer?: BoolFieldUpdateOperationsInput | boolean
    opponentAnswer?: BoolFieldUpdateOperationsInput | boolean
    creatorWinner?: StringFieldUpdateOperationsInput | string
    opponentWinner?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    opponentId?: StringFieldUpdateOperationsInput | string
    creatorBid?: IntFieldUpdateOperationsInput | number
    opponentBid?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    timerPublic?: IntFieldUpdateOperationsInput | number
    contractTerms?: NullableStringFieldUpdateOperationsInput | string | null
    gameSelected?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    participantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersBetCreateManyChallengeInput = {
    id?: string
    createdAt?: Date | string
    winnerId: string
    userId: string
    amount: number
  }

  export type UsersBetUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type UsersBetUncheckedUpdateWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type UsersBetUncheckedUpdateManyWithoutChallengeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winnerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}