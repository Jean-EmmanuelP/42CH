// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?

    friends         String[] @default([])
    friendsRequests String[] @default([])

    access_token   String? // @db.Text
    // accounts       Account[]
    // sessions       Session[]
    balance        Int         @default(0)
    status         String      @default("offline")
    statusMessage  String?     @default("")
    challenges     Challenge[] @relation("CreatedChallenges")
    participations Challenge[] @relation("ParticipatedChallenges")
    wonChallenges  Challenge[] @relation("WonChallenges") // Nouveau champ pour les défis gagnés
}

model ChallengeHistory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
}

model UsersBet {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    winnerId    String
    userId      String
    amount      Int
    Challenge   Challenge? @relation(fields: [challengeId], references: [id])
    challengeId String?
}

model Challenge {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    completedAt DateTime?

    winnerId String?
    loserId  String?

    creatorAnswer  Boolean @default(false)
    opponentAnswer Boolean @default(false)

    creatorWinner  String @default("")
    opponentWinner String @default("")

    creatorId  String
    opponentId String

    creatorBid  Int
    opponentBid Int

    status String

    isPublic    Boolean @default(true)
    timerPublic Int     @default(0)

    userBets UsersBet[]

    contractTerms String?
    gameSelected  String

    description   String?
    participantId String?
    amount        Int?
    winner        User?   @relation("WonChallenges", fields: [winnerId], references: [id]) // Changement de la relation ici
    participant   User?   @relation("ParticipatedChallenges", fields: [participantId], references: [id])
    creator       User?   @relation("CreatedChallenges", fields: [creatorId], references: [id])
}

model Defi {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    creatorId  String @unique
    opponentId String @unique

    creatorHonor  Boolean
    opponentHonor Boolean

    creatorBid  Int
    opponentBid Int

    contractTerms String

    gameSelected String

    creatorAccepted  Boolean @default(false)
    opponentAccepted Boolean @default(false)

    isPublic    Boolean @default(false)
    timerPublic Int     @default(0)
}

model DefiRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    senderUsername   String
    receiverUsername String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id                    String   @id @default(cuid())
    title                 String
    description           String
    label                 String
    day                   String
    limitedSeats          Int?
    participantsUsernames String[]
    isFull                Boolean  @default(false)
}
